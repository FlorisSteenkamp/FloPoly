
import { assert, expect } from 'chai';
import { describe } from 'mocha';
import { bPremSequenceSubresultant, scaleFloatsToInts, bPremSequenceTrivial, bPremSequencePrimitive } from '../../../src/index';


describe('bPremSequenceSubresultant', function() {
	it('should correctly calculate the subresultant pseudo remainder sequence of two polynomials (with bigint coefficients)', 
	function() {
        {
            const ps = [
                [1n,0n,1n,0n,-3n,-3n,8n,2n,-5n],
                [3n,0n,5n,0n,-4n,-9n,21n]
            ];

            {
                let r = bPremSequenceSubresultant(ps[0], ps[1]);
                expect(r).to.deep.equal([
                    [1n, 0n, 1n, 0n, -3n, -3n, 8n, 2n, -5n],
                    [3n, 0n, 5n, 0n, -4n, -9n, 21n],
                    [15n, 0n, -3n, 0n, 9n],
                    [65n, 125n, -245n],
                    [9326n, -12300n],
                    [260708n]
                ]);
            }
        }

        {
            /*   
            //Leave code below: used to generate test polynomials

            let as: number[] = [];
            for (let i=0; i<10; i++) {
                as.push((Math.random()-0.5));
            }
            let bs = scaleFloatsToInts(as);

            console.log(bs);
            */
        }

        {
            let p0 = [
                -2071879803233509n,
                -1551073925286799n,
                -1714877254241296n,
                419466736383513n,
                -732271054708671n,
                -1283774334116040n,
                1110932411912810n,
                -1555680809572634n,
                -1700063197958537n,
                -387010739459502n
            ];

            let p1 = [
                -488527141369099n,
                619888273434382n,
                1979589734701074n,
                -899021414859250n,
                1520286574904212n,
                -106208695479029n
            ];

            let ra = bPremSequenceSubresultant(p0, p1);
            let rb = bPremSequencePrimitive(p0, p1);

            expect(ra).to.deep.equal([[
                    -2071879803233509n,
                    -1551073925286799n,
                    -1714877254241296n,
                    419466736383513n,
                    -732271054708671n,
                    -1283774334116040n,
                    1110932411912810n,
                    -1555680809572634n,
                    -1700063197958537n,
                    -387010739459502n
                ],
                [
                    -488527141369099n,
                    619888273434382n,
                    1979589734701074n,
                    -899021414859250n,
                    1520286574904212n,
                    -106208695479029n
                ],
                [
                    -6866688540427785464513714014166412102845426740783352152739447625015693781382884107879633643n,
                    -11227685844662911865042603491891228633048883986562331067302377468090413750549928416305883525n,
                    2524698427813700054577910337314190560378757039613723630593536248915523711508576372573588772n,
                    -8761691080619059557938567458389015370972628379425713659403702915880822619339892331675820404n,
                    611662649881969849344272897423683610554622423694652680914398233065521280847125288061887885n
                ],
                [
                    880649334136896292685039344587596420426494748317236242086217242447768225232403017823172001267210856963306627582765709738997n,
                    -416744843798512669968213114334495312410445496633497320223103017301955056619207237167216950699146961759823357578582663578850n,
                    564990870959180330358609780630707925746683047506318958818673432654294809879097397376829459530325021352557321665128554601439n,
                    -34166046950868918093518541290550453466933859300413762630788007907806175268691799002679710569983617670874445753863452737136n
                ],
                [
                    1301863539249965271661694598587674224598443704989574304826660889555494002762511461416642315724956923430964012994441424308778228534914009931983112656136983n,
                    4274887568846519557443892061848452963778178117820606531103575766422679662722116957983444933855980351466886783680293749842908146009307029942682194473010917n,
                    822399078434839742310791127329281177055607987679972023217623236545356494667612860753396959405148045032159313729245678288008854867699074198915361326253885n
                ],
                [
                    23760885779028308403665394477015767486412884142499807901651272378889591430660717984063857412750793657319051165356323008613646774804669913994490103915083921794529262231378932616963219491n,
                    4492784854565333312267072310620642258846968638194096268243230600614031242129891126495605380809516443334180469169253460381012039884606917878897314238490611998420068280908239994512078979n
                ],
                [
                    20198231623680611232955242106820692612335983615452659623746445520936731339181502741412486359834523285439868345468707589555278064402941517669988197938483980066415049796766945656247938438882574531491522717831729948375n
                ]
            ]);
        }
	});
});
