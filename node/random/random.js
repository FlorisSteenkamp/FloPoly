"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.predictiveRandom = exports.flatCoefficientsArr = exports.flatCoefficients = exports.flatRootsArr = exports.flatRoots = void 0;
const from_roots_1 = require("../roots/from-roots");
/**
 * Some seed value for the simple random number generator.
 * @ignore
 */
const SEED = 123456789;
/**
 * The range for the simple random number generator, i.e. the generated
 * numbers will be in [0,RANGE].
 * @ignore
 */
const RANGE = 4294967296;
/**
 * Creates a function from the given function with parameters similar
 * to flatRoots but with an extra parameter in the beginning indicating
 * the length of the array generated by the original function.
 * @private
 * @param f
 */
function createArrFunction(f) {
    return function (n, d, a, b, seed = SEED, odds = 0) {
        let res = [];
        for (let i = 0; i < n; i++) {
            let v = f(d, a, b, seed, odds);
            let p = v.p;
            seed = v.seed;
            res.push(p);
        }
        return res;
    };
}
/**
 * Generates an array of random polynomials with parameters as specified
 * by flatRoots. The exact same polynomials will be created on each
 * call to this function if the same seed is used - this is by design to
 * improve testability.
 * @memberof Random
 * @param n - The number of polynomials to generate.
 * @param d - The degree of the polynomials
 * @param a - The lower bound of the distribution - defaults
 * to 0
 * @param b - The upper bound of the distribution - defaults
 * to 1
 * @param seed - A seed value for generating random values (so
 * that the results are reproducable)
 * @param odds - The odds that a root will be doubled (applied
 * recursively so that some roots will be tripled, etc. - defaults to 0
 * @example
 * FloPoly.Random.flatRootsArr(2,3,0,10); //=> [[1, -17.27247918024659, 97.33487287168995, -179.34094494147305], [1, -14.934967160224915, 57.624514485645406, -14.513933300587215]]
 * FloPoly.Random.flatRootsArr(2,3,0,10); //=> [[1, -17.27247918024659, 97.33487287168995, -179.34094494147305], [1, -14.934967160224915, 57.624514485645406, -14.513933300587215]]
 */
let flatRootsArr = createArrFunction(flatRoots);
exports.flatRootsArr = flatRootsArr;
/**
 * Generates and returns an array of random polynomials as specified by
 * flatCoefficients. The exact same polynomials will be created on each
 * call to this function if the same seed is used - this is by design to
 * improve testability.
 *
 * @memberof Random
 * @param n The number of polynomials to generate.
 * @param d The degree of the polynomials
 * @param a The lower bound of the distribution - defaults to 0
 * @param b The upper bound of the distribution - defaults to 1
 * @param seed - A seed value for generating random values (so
 * that the results are reproducable)
 * @example
 * flatCoefficientsArr(2,3,-2,2); //=> [[0.1749166026711464, -0.20349335670471191, 0.9375684261322021], [1.0617692470550537, -1.8918039798736572, 0.8040215969085693]]
 * flatCoefficientsArr(2,3,-2,2); //=> [[0.1749166026711464, -0.20349335670471191, 0.9375684261322021], [1.0617692470550537, -1.8918039798736572, 0.8040215969085693]]
 */
let flatCoefficientsArr = createArrFunction(flatCoefficients);
exports.flatCoefficientsArr = flatCoefficientsArr;
/**
 * Returns a quasi-random number to be used as the next input to this function.
 * See https://stackoverflow.com/questions/3062746/special-simple-random-number-generator
 * @private
 * @param seed
 */
function predictiveRandom(seed) {
    const a = 134775813;
    return (a * seed + 1) % RANGE;
}
exports.predictiveRandom = predictiveRandom;
/**
 * Generates a random array of numbers picked from a bounded flat
 * distribution (i.e. a rectangular distribution) with specified odds of
 * duplication of consecutive values.
 *
 * @ignore
 * @param n - The number of values to generate.
 * @param a - The lower bound of the distribution - defaults
 * to 0
 * @param b - The upper bound of the distribution - defaults
 * to 1
 * @param seed - A seed value for generating random values (so
 * that the results are reproducable)
 * @param odds - The odds that a root will be doubled (applied
 * recursively so that some roots will be tripled, etc. - defaults to 0
 */
function randomArray(n, a, b, seed = SEED, odds = 0) {
    let vs = [];
    for (let i = 0; i < n; i++) {
        seed = predictiveRandom(seed);
        let v = ((seed / RANGE) * (b - a)) + a;
        seed = push(seed, vs, v, odds);
    }
    vs = vs.slice(0, n);
    return { vs, seed };
}
/**
 * Helper function that will add more numbers to the passed array - modifies the
 * values parameter.
 * @private
 * @param seed
 * @param values - An existing array of values - will be modified!
 * @param x - The number that will be added (possibly multiple times)
 * @param odds - The odds that the number will be added again (recursively).
 */
function push(seed, values, x, odds) {
    seed = predictiveRandom(seed);
    values.push(x);
    if ((seed / RANGE) < odds) {
        seed = push(seed, values, x, odds);
    }
    return seed;
}
/**
 * Generates a random polynomial with roots picked from a bounded flat
 * distribution (i.e. a rectangular distribution) with specified odds of
 * duplication of consecutive values. Note that the resulting polynomial
 * won't have any complex roots.
 * @memberof Random
 * @param d - The degree of the polynomials
 * @param a - The lower bound of the distribution - defaults
 * to 0
 * @param b - The upper bound of the distribution - defaults
 * to 1
 * @param seed - A seed value for generating random values (so
 * that the results are reproducable)
 * @param odds - The odds that a root will be doubled (applied
 * recursively so that some roots will be tripled, etc. - defaults to 0
 * @example
 * FloPoly.Random.flatRoots(3,0,10); //=> { p: [1, -17.27247918024659, 97.33487287168995, -179.34094494147305], seed: 939629312 }
 */
function flatRoots(d, a = 0, b = 1, seed = SEED, odds = 0) {
    let randArr = randomArray(d, a, b, seed, odds);
    seed = randArr.seed;
    let p = from_roots_1.fromRoots(randArr.vs);
    return { p, seed };
}
exports.flatRoots = flatRoots;
/**
 * Generates a random polynomial with coefficients picked from a bounded
 * flat distribution (i.e. a rectangular distribution).
 * @memberof Random
 * @param d - The degree of the polynomials
 * @param a - The lower bound of the distribution - defaults to -1
 * @param b - The upper bound of the distribution - defaults to 1
 * @param seed - A seed value for generating random values (so that the results
 * are reproducable)
 * @example
 * FloPoly.Random.flatCoefficients(3,-5,5); //=> { p: [0.437291506677866, -0.5087333917617798, 2.3439210653305054], seed: 939629312 }
 */
function flatCoefficients(d, a = -1, b = +1, seed = SEED) {
    a = (a === undefined) ? -1 : a;
    b = (b === undefined) ? +1 : b;
    seed = (seed === undefined) ? SEED : seed;
    let randArr = randomArray(d, a, b, seed);
    seed = randArr.seed;
    let p = randArr.vs;
    return { p, seed };
}
exports.flatCoefficients = flatCoefficients;
//# sourceMappingURL=random.js.map