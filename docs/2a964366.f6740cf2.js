(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{100:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),c=(n(0),n(231)),b={id:"gcd_double_integer_gcd",title:"integer-gcd"},o={unversionedId:"modules/gcd_double_integer_gcd",id:"modules/gcd_double_integer_gcd",isDocsHomePage:!1,title:"integer-gcd",description:"\u25b8 function gcdInt",source:"@site/docs\\modules\\gcd_double_integer_gcd.mdx",slug:"/modules/gcd_double_integer_gcd",permalink:"/FloPoly/docs/modules/gcd_double_integer_gcd",version:"current",sidebar:"sidebar",previous:{title:"b-integer-gcd",permalink:"/FloPoly/docs/modules/gcd_bigint_b_integer_gcd"},next:{title:"e-integer-gcd",permalink:"/FloPoly/docs/modules/gcd_expansion_e_integer_gcd"}},l=[],i={rightToc:l};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"\u25b8 function gcdInt\n(",Object(c.b)("inlineCode",{parentName:"p"},"a"),": number, ",Object(c.b)("inlineCode",{parentName:"p"},"b"),": number): number"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",{parentName:"em",href:"https://github.com/FlorisSteenkamp/FloPoly/blob/93f3a8d/src/gcd/double/integer-gcd.ts#L9"},"gcd/double/integer-gcd.ts:9"))),Object(c.b)("p",null,"Computes the greatest common divisor of two integers a and b, using the\nEuclidean Algorithm."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"precondition")," a, b must be integers"),Object(c.b)("h4",{id:"parameters"},"Parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"Name"),Object(c.b)("th",{parentName:"tr",align:null},"Type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("inlineCode",{parentName:"td"},"a")),Object(c.b)("td",{parentName:"tr",align:null},"number")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("inlineCode",{parentName:"td"},"b")),Object(c.b)("td",{parentName:"tr",align:null},"number")))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," number"),Object(c.b)("hr",null),Object(c.b)("p",null,"\u25b8 function gcdInts\n(",Object(c.b)("inlineCode",{parentName:"p"},"vals"),": number[]): number"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",{parentName:"em",href:"https://github.com/FlorisSteenkamp/FloPoly/blob/93f3a8d/src/gcd/double/integer-gcd.ts#L85"},"gcd/double/integer-gcd.ts:85"))),Object(c.b)("p",null,"Naively computes and returns the greatest common divisor of 2 or more\nintegers by taking each integer in turn and calculating the GCD of that\ninteger and the previously calculated GCD (where the first GCD is simply\ntaken as the first number)."),Object(c.b)("h4",{id:"parameters-1"},"Parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"Name"),Object(c.b)("th",{parentName:"tr",align:null},"Type"),Object(c.b)("th",{parentName:"tr",align:null},"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("inlineCode",{parentName:"td"},"vals")),Object(c.b)("td",{parentName:"tr",align:null},"number[]"),Object(c.b)("td",{parentName:"tr",align:null},"the integers for which the GCD is to be calculated")))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," number"))}u.isMDXComponent=!0},231:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return s}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=a.a.createContext({}),u=function(e){var t=a.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,b=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,s=p["".concat(b,".").concat(m)]||p[m]||d[m]||c;return n?a.a.createElement(s,o(o({ref:t},i),{},{components:n})):a.a.createElement(s,o({ref:t},i))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,b=new Array(c);b[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,b[1]=o;for(var i=2;i<c;i++)b[i]=n[i];return a.a.createElement.apply(null,b)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);