{
  "docs": [
    {
      "comment": "/**\r\n * <p>Finds a near optimal approximation to the real roots (or those \r\n * within a range) of the input polynomial.\r\n * </p>\r\n * <p>\r\n * Only multiple roots of even order that is very close together may be \r\n * missed. (This is rarely a problem in practice - in a geometrical \r\n * application, for instance, this may mean two objects are barely \r\n * touching and returning either, all, or none of the repeated even \r\n * roots should not break the algorithm). \r\n * </p>\r\n * \r\n * @alias allRoots\r\n * @param {number[]} p - The polynomial\r\n * @param {number} a - Lower limit of root values that should be \r\n * returned - defaults to -∞\r\n * @param {number} b - Upper limit of root values that should be \r\n * returned - defaults to +∞\r\n * @returns {number[]} The found roots.\r\n * @impl_notes\r\n * @example\r\n * FloPoly.allRoots([1, -10, 35, -50, 24]); //=> [1, 2.0000000000000036, 3.0000000000000067, 4] \r\n */",
      "meta": {
        "range": [
          1445,
          4019
        ],
        "filename": "all-roots-recursive.js",
        "lineno": 44,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100000061",
          "name": "allRootsRecursive",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "a",
            "b"
          ]
        },
        "vars": {
          "p": "allRoots~p",
          "a": "allRoots~a",
          "b": "allRoots~b",
          "d": "allRoots~d",
          "rangeFilter": "allRoots~rangeFilter",
          "lowerBound": "allRoots~lowerBound",
          "upperBound": "allRoots~upperBound",
          "dp": "allRoots~dp",
          "roots": "allRoots~roots"
        }
      },
      "description": "<p>Finds a near optimal approximation to the real roots (or those \rwithin a range) of the input polynomial.\r</p>\r<p>\rOnly multiple roots of even order that is very close together may be \rmissed. (This is rarely a problem in practice - in a geometrical \rapplication, for instance, this may mean two objects are barely \rtouching and returning either, all, or none of the repeated even \rroots should not break the algorithm). \r</p>",
      "alias": "allRoots",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Lower limit of root values that should be \rreturned - defaults to -∞",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Upper limit of root values that should be \rreturned - defaults to +∞",
          "name": "b"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The found roots."
        }
      ],
      "tags": [
        {
          "originalTitle": "impl_notes",
          "title": "impl_notes",
          "text": ""
        }
      ],
      "examples": [
        "FloPoly.allRoots([1, -10, 35, -50, 24]); //=> [1, 2.0000000000000036, 3.0000000000000067, 4] "
      ],
      "name": "allRoots",
      "longname": "allRoots",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000017",
      "___s": true
    },
    {
      "comment": "/**\r\n * Returns a function that returns true if x is in the range [a,b].\r\n *  \r\n * @ignore\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {function}\r\n */",
      "meta": {
        "range": [
          4190,
          4273
        ],
        "filename": "all-roots-recursive.js",
        "lineno": 137,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100000267",
          "name": "inRange",
          "type": "FunctionDeclaration",
          "paramnames": [
            "a",
            "b"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a function that returns true if x is in the range [a,b].",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "b"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          }
        }
      ],
      "name": "inRange",
      "longname": "inRange",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000033",
      "___s": true
    },
    {
      "comment": "/**\r\n * Finds all roots of the given polynomial within the given intervals.\r\n *  \r\n * @ignore\r\n * @param {number[]} p\r\n * @param {number[]} intervals\r\n * @returns {number[]} The found roots.\r\n */",
      "meta": {
        "range": [
          4476,
          5161
        ],
        "filename": "all-roots-recursive.js",
        "lineno": 152,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100000284",
          "name": "rootsWithin",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "intervals"
          ]
        },
        "vars": {
          "roots": "rootsWithin~roots",
          "peval": "rootsWithin~peval",
          "prevRoot": "rootsWithin~prevRoot",
          "a": "rootsWithin~a",
          "i": "rootsWithin~i",
          "root": "rootsWithin~root",
          "b": "rootsWithin~b",
          "evA": "rootsWithin~evA",
          "evB": "rootsWithin~evB",
          "k": "rootsWithin~k"
        }
      },
      "description": "Finds all roots of the given polynomial within the given intervals.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "name": "p"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "name": "intervals"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The found roots."
        }
      ],
      "name": "rootsWithin",
      "longname": "rootsWithin",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000034",
      "___s": true
    },
    {
      "comment": "/** \r\n * DO NOT USE. EXPERIMENTAL.\r\n * Find all the roots using the VAS algorithm followed by Brent's \r\n * method.\r\n *  \r\n * @ignore\r\n * @param {number[]} p - A square-free polynomial.\r\n * @returns {number[]} The roots.\r\n **/",
      "meta": {
        "range": [
          693,
          1238
        ],
        "filename": "all-roots-vas.js",
        "lineno": 29,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100000482",
          "name": "allRootsVAS",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p_"
          ]
        },
        "vars": {
          "p": "allRootsVAS~p",
          "numZeros": "allRootsVAS~numZeros",
          "vasRoots": "allRootsVAS~vasRoots",
          "": null,
          "i": "allRootsVAS~i"
        }
      },
      "description": "DO NOT USE. EXPERIMENTAL.\rFind all the roots using the VAS algorithm followed by Brent's \rmethod.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "A square-free polynomial.",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The roots."
        }
      ],
      "name": "allRootsVAS",
      "longname": "allRootsVAS",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000064",
      "___s": true
    },
    {
      "comment": "/**\r\n * Removes the zero roots from the polynomial.\r\n * \r\n * @ignore\r\n * @returns {number[]} The deflated polynomial.\r\n *       \r\n */",
      "meta": {
        "range": [
          1452,
          1616
        ],
        "filename": "all-roots-vas.js",
        "lineno": 64,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100000545",
          "name": "removeZeroRoots",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p_"
          ]
        },
        "vars": {
          "p": "removeZeroRoots~p",
          "i": "removeZeroRoots~i",
          "len": "removeZeroRoots~len"
        }
      },
      "description": "Removes the zero roots from the polynomial.",
      "ignore": true,
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The deflated polynomial."
        }
      ],
      "name": "removeZeroRoots",
      "longname": "removeZeroRoots",
      "kind": "function",
      "scope": "global",
      "params": [],
      "___id": "T000002R000069",
      "___s": true
    },
    {
      "comment": "/** \r\n * Finds root intervals of a polynomial such that each interval contains\r\n * exactly one root using the VAS (Vincent–Akritas–Strzeboński) method.\r\n * \r\n * @ignore\r\n * @see http://www.e-ce.uth.gr/wp-content/uploads/formidable/phd_thesis_vigklas.pdf\r\n */",
      "meta": {
        "range": [
          2063,
          2555
        ],
        "filename": "all-roots-vas.js",
        "lineno": 87,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100000583",
          "name": "vasRootIntervals",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "positiveIntervals": "vasRootIntervals~positiveIntervals",
          "intervals": "vasRootIntervals~intervals"
        }
      },
      "description": "Finds root intervals of a polynomial such that each interval contains\rexactly one root using the VAS (Vincent–Akritas–Strzeboński) method.",
      "ignore": true,
      "see": [
        "http://www.e-ce.uth.gr/wp-content/uploads/formidable/phd_thesis_vigklas.pdf"
      ],
      "name": "vasRootIntervals",
      "longname": "vasRootIntervals",
      "kind": "function",
      "scope": "global",
      "params": [],
      "___id": "T000002R000073",
      "___s": true
    },
    {
      "comment": "/** \r\n * Helper function\r\n * The initial mobius transformation must be [[1,0],[0,1]] = M(x) = x.\r\n * \r\n * @ignore\r\n */",
      "meta": {
        "range": [
          2681,
          4351
        ],
        "filename": "all-roots-vas.js",
        "lineno": 120,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100000610",
          "name": "vasRootIntervalsHelper",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "mobius"
          ]
        },
        "vars": {
          "intervals": "vasRootIntervalsHelper~intervals",
          "signVariations": "vasRootIntervalsHelper~signVariations",
          "M0": "vasRootIntervalsHelper~M0",
          "MI": "vasRootIntervalsHelper~MI",
          "MM0": "vasRootIntervalsHelper~MM0",
          "MMI": "vasRootIntervalsHelper~MMI",
          "lb": "vasRootIntervalsHelper~lb",
          "p": "vasRootIntervalsHelper~p",
          "mobius": "vasRootIntervalsHelper~mobius",
          "p01": "vasRootIntervalsHelper~p01",
          "M01": "vasRootIntervalsHelper~M01",
          "m": "vasRootIntervalsHelper~m",
          "p1inf": "vasRootIntervalsHelper~p1inf",
          "M1inf": "vasRootIntervalsHelper~M1inf",
          "intervals1": "vasRootIntervalsHelper~intervals1",
          "intervals3": "vasRootIntervalsHelper~intervals3"
        }
      },
      "description": "Helper function\rThe initial mobius transformation must be [[1,0],[0,1]] = M(x) = x.",
      "ignore": true,
      "name": "vasRootIntervalsHelper",
      "longname": "vasRootIntervalsHelper",
      "kind": "function",
      "scope": "global",
      "params": [],
      "___id": "T000002R000076",
      "___s": true
    },
    {
      "comment": "/**\r\n * Returns true if two polynomials are exactly equal by comparing \r\n * coefficients.\r\n * \r\n * @param {number[]} p1 - A polynomial\r\n * @param {number[]} p2 - Another polynomial \r\n * @returns {boolean} True if exactly equal, false otherwise.\r\n * @example\r\n * FloPoly.equal([1,2,3,4], [1,2,3,4]);   //=> true\r\n * FloPoly.equal([1,2,3,4], [1,2,3,4,5]); //=> false\r\n */",
      "meta": {
        "range": [
          697,
          869
        ],
        "filename": "core-operators.js",
        "lineno": 38,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100000865",
          "name": "equal",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p1",
            "p2"
          ]
        },
        "vars": {
          "i": "equal~i"
        }
      },
      "description": "Returns true if two polynomials are exactly equal by comparing \rcoefficients.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "A polynomial",
          "name": "p1"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "Another polynomial",
          "name": "p2"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "True if exactly equal, false otherwise."
        }
      ],
      "examples": [
        "FloPoly.equal([1,2,3,4], [1,2,3,4]);   //=> true\rFloPoly.equal([1,2,3,4], [1,2,3,4,5]); //=> false"
      ],
      "name": "equal",
      "longname": "equal",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000116",
      "___s": true
    },
    {
      "comment": "/**\r\n * Adds two polynomials.\r\n * \r\n * @param {number[]} p1 - The first polynomial\r\n * @param {number[]} p2 - The second polynomial\r\n * @returns {number[]} p1 + p2.\r\n * @example\r\n * FloPoly.add([1,2,3],[3,4]); //=> [1,5,7]\r\n */",
      "meta": {
        "range": [
          1104,
          1613
        ],
        "filename": "core-operators.js",
        "lineno": 56,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100000907",
          "name": "add",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p1",
            "p2"
          ]
        },
        "vars": {
          "d1": "add~d1",
          "d2": "add~d2",
          "Δd": "add~Δd",
          "Δd1": "add~Δd1",
          "Δd2": "add~Δd2",
          "d": "add~d",
          "result": "add~result",
          "i": "add~i",
          "c1": "add~c1",
          "c2": "add~c2"
        }
      },
      "description": "Adds two polynomials.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The first polynomial",
          "name": "p1"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The second polynomial",
          "name": "p2"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "p1 + p2."
        }
      ],
      "examples": [
        "FloPoly.add([1,2,3],[3,4]); //=> [1,5,7]"
      ],
      "name": "add",
      "longname": "add",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000118",
      "___s": true
    },
    {
      "comment": "/** \r\n * Subtracts the second polynomial from first.\r\n * \r\n * @param {number[]} p1 - The polynomial from which will be subtracted\r\n * @param {number[]} p2 - The polynomial that will be subtracted\r\n * @returns {number[]} p1 - p2\r\n * @example\r\n * FloPoly.subtract([2,3],[4,4]); //=> [-2, -1]\r\n */",
      "meta": {
        "range": [
          1915,
          2429
        ],
        "filename": "core-operators.js",
        "lineno": 94,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001020",
          "name": "subtract",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p1",
            "p2"
          ]
        },
        "vars": {
          "d1": "subtract~d1",
          "d2": "subtract~d2",
          "Δd": "subtract~Δd",
          "Δd1": "subtract~Δd1",
          "Δd2": "subtract~Δd2",
          "d": "subtract~d",
          "result": "subtract~result",
          "i": "subtract~i",
          "c1": "subtract~c1",
          "c2": "subtract~c2"
        }
      },
      "description": "Subtracts the second polynomial from first.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial from which will be subtracted",
          "name": "p1"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial that will be subtracted",
          "name": "p2"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "p1 - p2"
        }
      ],
      "examples": [
        "FloPoly.subtract([2,3],[4,4]); //=> [-2, -1]"
      ],
      "name": "subtract",
      "longname": "subtract",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000131",
      "___s": true
    },
    {
      "comment": "/**\r\n * Negate the given polynomial (p -> -p).  \r\n * \r\n * @param {number[]} p - The polynomial\r\n * @returns {number[]} -p\r\n * @example\r\n * FloPoly.negate([0.1, -0.2]); //=> [-0.1, 0.2]\r\n */",
      "meta": {
        "range": [
          2626,
          2682
        ],
        "filename": "core-operators.js",
        "lineno": 131,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001133",
          "name": "negate",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        }
      },
      "description": "Negate the given polynomial (p -> -p).",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "-p"
        }
      ],
      "examples": [
        "FloPoly.negate([0.1, -0.2]); //=> [-0.1, 0.2]"
      ],
      "name": "negate",
      "longname": "negate",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000144",
      "___s": true
    },
    {
      "comment": "/**  \r\n * Differentiates the given polynomial.\r\n * \r\n * @param {number[]} p - The polynomial\r\n * @returns {number[]} D(p)\r\n * @example\r\n * FloPoly.differentiate([5, 4, 3, 2, 1]); //=> [20, 12, 6, 2]\r\n */",
      "meta": {
        "range": [
          2893,
          3054
        ],
        "filename": "core-operators.js",
        "lineno": 144,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001143",
          "name": "differentiate",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "result": "differentiate~result",
          "d": "differentiate~d",
          "i": "differentiate~i"
        }
      },
      "description": "Differentiates the given polynomial.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "D(p)"
        }
      ],
      "examples": [
        "FloPoly.differentiate([5, 4, 3, 2, 1]); //=> [20, 12, 6, 2]"
      ],
      "name": "differentiate",
      "longname": "differentiate",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000145",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p> \r\n * Multiplies the two given polynomials and returns the result. \r\n * </p>\r\n * <p>\r\n * See <a href=\"https://en.wikipedia.org/wiki/Polynomial_arithmetic\">polynomial arithmetic</a>\r\n * </p>\r\n * <p>\r\n * See <a href=\"https://en.wikipedia.org/wiki/Discrete_Fourier_transform#Polynomial_multiplication\">polynomial multiplication</a>\r\n * </p>\r\n * <p>\r\n * See <a herf=\"http://web.cs.iastate.edu/~cs577/handouts/polymultiply.pdf\">polynomial multiplication (pdf)</a>\r\n * </p>\r\n * @param {number[]} p1 - The one polynomial.\r\n * @param {number[]} p2 - The other polynomial.\r\n * @returns {number[]} p1 * p2\r\n * @example\r\n * FloPoly.multiply([1,2,3], [2,5,3,5]); //=> [2, 9, 19, 26, 19, 15]\r\n */",
      "meta": {
        "range": [
          3941,
          4227
        ],
        "filename": "core-operators.js",
        "lineno": 179,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001184",
          "name": "multiply",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p1",
            "p2"
          ]
        },
        "vars": {
          "d1": "multiply~d1",
          "d2": "multiply~d2",
          "d": "multiply~d",
          "result": "multiply~result",
          "i": "multiply~i",
          "j": "multiply~j",
          "result[undefined]": "multiply~result.undefined]"
        }
      },
      "description": "<p> \rMultiplies the two given polynomials and returns the result. \r</p>\r<p>\rSee <a href=\"https://en.wikipedia.org/wiki/Polynomial_arithmetic\">polynomial arithmetic</a>\r</p>\r<p>\rSee <a href=\"https://en.wikipedia.org/wiki/Discrete_Fourier_transform#Polynomial_multiplication\">polynomial multiplication</a>\r</p>\r<p>\rSee <a herf=\"http://web.cs.iastate.edu/~cs577/handouts/polymultiply.pdf\">polynomial multiplication (pdf)</a>\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The one polynomial.",
          "name": "p1"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The other polynomial.",
          "name": "p2"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "p1 * p2"
        }
      ],
      "examples": [
        "FloPoly.multiply([1,2,3], [2,5,3,5]); //=> [2, 9, 19, 26, 19, 15]"
      ],
      "name": "multiply",
      "longname": "multiply",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000149",
      "___s": true
    },
    {
      "comment": "/** \r\n * Multiplies 2 polynomials by a constant.\r\n * \r\n * @param {number} c - The constant\r\n * @param {number[]} p - The polynomial\r\n * @returns {number[]} c*p\r\n * @example \r\n * FloPoly.multiplyByConst(0.25, [3,2,1]); //=> [0.75, 0.5, 0.25]  \r\n */",
      "meta": {
        "range": [
          4482,
          4738
        ],
        "filename": "core-operators.js",
        "lineno": 204,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001273",
          "name": "multiplyByConst",
          "type": "FunctionDeclaration",
          "paramnames": [
            "c",
            "p"
          ]
        },
        "vars": {
          "d": "multiplyByConst~d",
          "result": "multiplyByConst~result",
          "i": "multiplyByConst~i"
        }
      },
      "description": "Multiplies 2 polynomials by a constant.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The constant",
          "name": "c"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "c*p"
        }
      ],
      "examples": [
        "FloPoly.multiplyByConst(0.25, [3,2,1]); //=> [0.75, 0.5, 0.25]  "
      ],
      "name": "multiplyByConst",
      "longname": "multiplyByConst",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000157",
      "___s": true
    },
    {
      "comment": "/** \r\n * Returns the degree of the polynomial.\r\n * \r\n * @param {number[]} p - The polynomial\r\n * @returns {number} \r\n * @example \r\n * FloPoly.degree([9,8,7,6,5,4,3,2,1]); //=> 9\r\n */",
      "meta": {
        "range": [
          4928,
          4972
        ],
        "filename": "core-operators.js",
        "lineno": 226,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001324",
          "name": "degree",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        }
      },
      "description": "Returns the degree of the polynomial.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "examples": [
        "FloPoly.degree([9,8,7,6,5,4,3,2,1]); //=> 9"
      ],
      "name": "degree",
      "longname": "degree",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000161",
      "___s": true
    },
    {
      "comment": "/** \r\n * Evaluates a univariate polynomial using Horner's method. This \r\n * function is curried (see examples below).  \r\n * \r\n * @see https://en.wikipedia.org/wiki/Horner%27s_method\r\n * @param {number[]} p - The polynomial\r\n * @param {number} a - The value at which to evaluate the polynomial.\r\n * @returns {number|function} The result if both parameters are supplied\r\n * or a function with arity one if only the first parameter is supplied.\r\n * @example\r\n * let ev = FloPoly.evaluate([3,2,1]);\r\n * ev(1); // => 6\r\n * ev(2); // => 17\r\n * \t\t \r\n * FloPoly.evaluate([3,2,1], 1); // => 6\r\n * FloPoly.evaluate([3,2,1], 2); // => 17\r\n * \r\n * FloPoly.evaluate([3,2,1])(1); // => 6\r\n * FloPoly.evaluate([3,2,1])(2); // => 17\r\n */",
      "meta": {
        "range": [
          5701,
          5989
        ],
        "filename": "core-operators.js",
        "lineno": 251,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001334",
          "name": "evaluate",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "a"
          ]
        },
        "vars": {
          "evaluate": "evaluate~evaluate"
        }
      },
      "description": "Evaluates a univariate polynomial using Horner's method. This \rfunction is curried (see examples below).",
      "see": [
        "https://en.wikipedia.org/wiki/Horner%27s_method"
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The value at which to evaluate the polynomial.",
          "name": "a"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number",
              "function"
            ]
          },
          "description": "The result if both parameters are supplied\ror a function with arity one if only the first parameter is supplied."
        }
      ],
      "examples": [
        "let ev = FloPoly.evaluate([3,2,1]);\rev(1); // => 6\rev(2); // => 17\r\t\t \rFloPoly.evaluate([3,2,1], 1); // => 6\rFloPoly.evaluate([3,2,1], 2); // => 17\r\rFloPoly.evaluate([3,2,1])(1); // => 6\rFloPoly.evaluate([3,2,1])(2); // => 17"
      ],
      "name": "evaluate",
      "longname": "evaluate",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000162",
      "___s": true
    },
    {
      "comment": "/** \r\n * Evaluates the given polynomial at 0 - it is much faster than at an \r\n * arbitrary point. \r\n *  \r\n * @param {number[]} p - The polynomial\r\n * @returns {number}\r\n * @example\r\n * FloPoly.evaluateAt0([3,2,99]); //=> 99\r\n */",
      "meta": {
        "range": [
          6225,
          6277
        ],
        "filename": "core-operators.js",
        "lineno": 276,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001383",
          "name": "evaluateAt0",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        }
      },
      "description": "Evaluates the given polynomial at 0 - it is much faster than at an \rarbitrary point.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "examples": [
        "FloPoly.evaluateAt0([3,2,99]); //=> 99"
      ],
      "name": "evaluateAt0",
      "longname": "evaluateAt0",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000167",
      "___s": true
    },
    {
      "comment": "/** \r\n * <p>\r\n * Returns the number of sign changes in the polynomial coefficents \r\n * when ordered in descending order; zeros are ignored.\r\n * </p>\r\n * <p>\r\n * Descartes' rule of signs states (quoted from Wikipedia):\r\n * \"if the terms of a polynomial are ordered by descending variable \r\n * exponent, then the number of positive roots of the polynomial is \r\n * either equal to the number of sign differences between consecutive \r\n * nonzero coefficients, or is less than it by an even number. Multiple \r\n * roots of the same value are counted separately.\"\r\n * </p>\r\n * @see https://en.wikipedia.org/wiki/Descartes%27_rule_of_signs\r\n * \r\n * @param {number[]} p - The polynomial\r\n * @returns {number} The number of sign changes.\r\n * @example\r\n * FloPoly.signChanges([1,2,-3,0,0,3,-1]); //=> 3\r\n */",
      "meta": {
        "range": [
          7082,
          7357
        ],
        "filename": "core-operators.js",
        "lineno": 301,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001396",
          "name": "signChanges",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "d": "signChanges~d",
          "result": "signChanges~result",
          "prevSign": "signChanges~prevSign",
          "i": "signChanges~i",
          "sign": "signChanges~sign"
        }
      },
      "description": "<p>\rReturns the number of sign changes in the polynomial coefficents \rwhen ordered in descending order; zeros are ignored.\r</p>\r<p>\rDescartes' rule of signs states (quoted from Wikipedia):\r\"if the terms of a polynomial are ordered by descending variable \rexponent, then the number of positive roots of the polynomial is \reither equal to the number of sign differences between consecutive \rnonzero coefficients, or is less than it by an even number. Multiple \rroots of the same value are counted separately.\"\r</p>",
      "see": [
        "https://en.wikipedia.org/wiki/Descartes%27_rule_of_signs"
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of sign changes."
        }
      ],
      "examples": [
        "FloPoly.signChanges([1,2,-3,0,0,3,-1]); //=> 3"
      ],
      "name": "signChanges",
      "longname": "signChanges",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000168",
      "___s": true
    },
    {
      "comment": "/**\r\n * Deflates the given polynomial by removing a factor (x - r), where\r\n * r is a root of the polynomial.\r\n * \r\n * @param {number[]} p - The polynomial\r\n * @param {number} root - A pre-calculated root of the polynomial.\r\n * @returns {number[]} The deflated polynomial.\r\n * @example\r\n * // The polynomial x^3 - 5x^2 + 8x - 4 has a root at 1 and a double root at 2 \r\n * FloPoly.deflate([1, -5, 8, -4], 2); //=> [1, -3, 2] \r\n * FloPoly.deflate([1, -3, 2], 2);     //=> [1,-1] \r\n * FloPoly.deflate([1, -1], 1);        //=> [1]\r\n */",
      "meta": {
        "range": [
          7895,
          8055
        ],
        "filename": "core-operators.js",
        "lineno": 332,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001463",
          "name": "deflate",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "root"
          ]
        },
        "vars": {
          "d": "deflate~d",
          "bs": "deflate~bs",
          "i": "deflate~i"
        }
      },
      "description": "Deflates the given polynomial by removing a factor (x - r), where\rr is a root of the polynomial.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "A pre-calculated root of the polynomial.",
          "name": "root"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The deflated polynomial."
        }
      ],
      "examples": [
        "// The polynomial x^3 - 5x^2 + 8x - 4 has a root at 1 and a double root at 2 \rFloPoly.deflate([1, -5, 8, -4], 2); //=> [1, -3, 2] \rFloPoly.deflate([1, -3, 2], 2);     //=> [1,-1] \rFloPoly.deflate([1, -1], 1);        //=> [1]"
      ],
      "name": "deflate",
      "longname": "deflate",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000175",
      "___s": true
    },
    {
      "comment": "/**\r\n * Inverts the given polynomial by reversing the order of the \r\n * coefficients.\r\n * \r\n * @param {number[]} p - The polynomial\r\n * @returns {number} p(x) -> x^deg(p) * p(1/x)\r\n * @example\r\n * FloPoly.invert([1,2,3,4]); // => [4,3,2,1]\r\n * FloPoly.invert([3,2,-5]);  // => [-5,2,3]\r\n */",
      "meta": {
        "range": [
          8353,
          8406
        ],
        "filename": "core-operators.js",
        "lineno": 355,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001512",
          "name": "invert",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        }
      },
      "description": "Inverts the given polynomial by reversing the order of the \rcoefficients.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "p(x) -> x^deg(p) * p(1/x)"
        }
      ],
      "examples": [
        "FloPoly.invert([1,2,3,4]); // => [4,3,2,1]\rFloPoly.invert([3,2,-5]);  // => [-5,2,3]"
      ],
      "name": "invert",
      "longname": "invert",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000179",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p> \r\n * Performs a change of variables of the form: p(x) <- p(ax + b).\r\n * </p>\r\n * <p>\r\n * See <a href=\"http://stackoverflow.com/questions/141422/how-can-a-transform-a-polynomial-to-another-coordinate-system\">this stackoverflow question</a>\r\n * </p>\r\n * @param {number[]} p - The polynomial\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number[]} The transformed polynomial.\r\n * @example\r\n * FloPoly.changeVariables([1,2,7], 3, 4); //=> [9, 30, 31]\r\n */",
      "meta": {
        "range": [
          8889,
          9636
        ],
        "filename": "core-operators.js",
        "lineno": 374,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001524",
          "name": "changeVariables",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "a",
            "b"
          ]
        },
        "vars": {
          "d": "changeVariables~d",
          "t": "changeVariables~t",
          "i": "changeVariables~i",
          "t[0][0]": "changeVariables~t.0][0]",
          "j": "changeVariables~j",
          "t[0][undefined]": "changeVariables~t.0][undefined]",
          "t[undefined][undefined]": "changeVariables~t.undefined][undefined]",
          "res": "changeVariables~res",
          "res[undefined]": "changeVariables~res.undefined]",
          "acc": "changeVariables~acc"
        }
      },
      "description": "<p> \rPerforms a change of variables of the form: p(x) <- p(ax + b).\r</p>\r<p>\rSee <a href=\"http://stackoverflow.com/questions/141422/how-can-a-transform-a-polynomial-to-another-coordinate-system\">this stackoverflow question</a>\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "b"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The transformed polynomial."
        }
      ],
      "examples": [
        "FloPoly.changeVariables([1,2,7], 3, 4); //=> [9, 30, 31]"
      ],
      "name": "changeVariables",
      "longname": "changeVariables",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000180",
      "___s": true
    },
    {
      "comment": "/**\r\n * Reflects the given polynomial about the Y-axis, i.e. perform the \r\n * change of variables: p(x) <- p(-x).\r\n * \r\n * @param {number[]} p - The polynomial to reflect\r\n * @returns {number[]} The reflected polynomial.\r\n * @example\r\n * FloPoly.reflectAboutYAxis([5,4,3,2,1]); //=> [5, -4, 3, -2, 1]\r\n */",
      "meta": {
        "range": [
          9949,
          10137
        ],
        "filename": "core-operators.js",
        "lineno": 420,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001709",
          "name": "reflectAboutYAxis",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "d": "reflectAboutYAxis~d",
          "result": "reflectAboutYAxis~result",
          "i": "reflectAboutYAxis~i",
          "result[undefined]": "reflectAboutYAxis~result.undefined]"
        }
      },
      "description": "Reflects the given polynomial about the Y-axis, i.e. perform the \rchange of variables: p(x) <- p(-x).",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial to reflect",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The reflected polynomial."
        }
      ],
      "examples": [
        "FloPoly.reflectAboutYAxis([5,4,3,2,1]); //=> [5, -4, 3, -2, 1]"
      ],
      "name": "reflectAboutYAxis",
      "longname": "reflectAboutYAxis",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000195",
      "___s": true
    },
    {
      "comment": "/** \r\n * Generates a sturm chain for the given polynomial.\r\n * \r\n * @see https://en.wikipedia.org/wiki/Sturm%27s_theorem\r\n * @param {number[]} p - The polynomial\r\n * @returns {number[][]} The sturm chain of polynomials\r\n * @example\r\n * FloPoly.sturmChain([-3,4,2,-2]); //=> [[-3, 4, 2, -2], [-9, 8, 2], [-2.5185185185185186, 1.7037037037037037], [-3.2932525951557086]]\r\n */",
      "meta": {
        "range": [
          10518,
          11732
        ],
        "filename": "core-operators.js",
        "lineno": 443,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001757",
          "name": "sturmChain",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "negRemainder": "sturmChain~negRemainder",
          "m": "sturmChain~m",
          "i": "sturmChain~i",
          "pnext": "sturmChain~pnext"
        }
      },
      "description": "Generates a sturm chain for the given polynomial.",
      "see": [
        "https://en.wikipedia.org/wiki/Sturm%27s_theorem"
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The sturm chain of polynomials"
        }
      ],
      "examples": [
        "FloPoly.sturmChain([-3,4,2,-2]); //=> [[-3, 4, 2, -2], [-9, 8, 2], [-2.5185185185185186, 1.7037037037037037], [-3.2932525951557086]]"
      ],
      "name": "sturmChain",
      "longname": "sturmChain",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000200",
      "___s": true
    },
    {
      "comment": "/** \r\n\t * Returns the negative of the remainder when dividing the first \r\n\t * polynomial (the dividend) by the second (the divisor) provided \r\n\t * that deg(p1) - deg(p2) === 1.\r\n\t * \r\n\t * @ignore\r\n\t * @param {number[]} p1 - The first polynomial (dividend)\r\n\t * @param {number[]} p2 - The second polynomial (divisor)\r\n\t * @see https://en.wikipedia.org/wiki/Sturm%27s_theorem\r\n\t */",
      "meta": {
        "range": [
          10930,
          11205
        ],
        "filename": "core-operators.js",
        "lineno": 455,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001761",
          "name": "negRemainder",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p1",
            "p2"
          ]
        },
        "vars": {
          "d1": "sturmChain~negRemainder~d1",
          "d2": "sturmChain~negRemainder~d2",
          "d": "sturmChain~negRemainder~d",
          "a": "sturmChain~negRemainder~a",
          "b": "sturmChain~negRemainder~b",
          "p3": "sturmChain~negRemainder~p3"
        }
      },
      "description": "Returns the negative of the remainder when dividing the first \rpolynomial (the dividend) by the second (the divisor) provided \rthat deg(p1) - deg(p2) === 1.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The first polynomial (dividend)",
          "name": "p1"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The second polynomial (divisor)",
          "name": "p2"
        }
      ],
      "see": [
        "https://en.wikipedia.org/wiki/Sturm%27s_theorem"
      ],
      "name": "negRemainder",
      "longname": "sturmChain~negRemainder",
      "kind": "function",
      "memberof": "sturmChain",
      "scope": "inner",
      "___id": "T000002R000201",
      "___s": true
    },
    {
      "comment": "/**\r\n * If the highest power coefficient is small in the sense that the \r\n * highest power term has a negligible contribution (compared to the\r\n * other terms) at x = 1 then clip() can be called to remove all such \r\n * highest terms. A contribution of less than Number.EPSILON of the \r\n * highest coefficient will be considered negligible by default.\r\n * \r\n * \r\n * @param {number[]} p - The polynomial to be clipped.\r\n * @param {number} δ - The optional contribution tolerence else \r\n *        Number.EPSILON will be used by default.   \r\n * @returns {number[]} The clipped polynomial.\r\n * @example\r\n * FloPoly.clip([1e-18, 1e-10, 1e-5]); //=> [1e-18, 1e-10, 1e-5] \r\n * FloPoly.clip([1e-18, 1e-10, 1e-1]); //=> [1e-10, 1e-1]\r\n */",
      "meta": {
        "range": [
          12468,
          12762
        ],
        "filename": "core-operators.js",
        "lineno": 516,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001908",
          "name": "clip",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "δ"
          ]
        },
        "vars": {
          "δ": "clip~δ",
          "c": "clip~c",
          "p_": "clip~p_"
        }
      },
      "description": "If the highest power coefficient is small in the sense that the \rhighest power term has a negligible contribution (compared to the\rother terms) at x = 1 then clip() can be called to remove all such \rhighest terms. A contribution of less than Number.EPSILON of the \rhighest coefficient will be considered negligible by default.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial to be clipped.",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The optional contribution tolerence else \r       Number.EPSILON will be used by default.",
          "name": "δ"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The clipped polynomial."
        }
      ],
      "examples": [
        "FloPoly.clip([1e-18, 1e-10, 1e-5]); //=> [1e-18, 1e-10, 1e-5] \rFloPoly.clip([1e-18, 1e-10, 1e-1]); //=> [1e-10, 1e-1]"
      ],
      "name": "clip",
      "longname": "clip",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000211",
      "___s": true
    },
    {
      "comment": "/**\r\n * If the highest power coefficient is 0 then clip() can be called to \r\n * remove all such highest terms so that the array is a valid \r\n * presentation of a polynomial.\r\n * \r\n * @param {number[]} p - The polynomial to be clipped.\r\n * @returns {number[]} The clipped polynomial.\r\n * @example\r\n * FloPoly.clip0([1e-18, 1e-10, 1e-1]); //=> [1e-18, 1e-10, 1e-1]\r\n * FloPoly.clip0([0, 1e-10, 1e-1]); //=> [1e-10, 1e-1]\r\n */",
      "meta": {
        "range": [
          13193,
          13261
        ],
        "filename": "core-operators.js",
        "lineno": 546,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100001986",
          "name": "clip0",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        }
      },
      "description": "If the highest power coefficient is 0 then clip() can be called to \rremove all such highest terms so that the array is a valid \rpresentation of a polynomial.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial to be clipped.",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The clipped polynomial."
        }
      ],
      "examples": [
        "FloPoly.clip0([1e-18, 1e-10, 1e-1]); //=> [1e-18, 1e-10, 1e-1]\rFloPoly.clip0([0, 1e-10, 1e-1]); //=> [1e-10, 1e-1]"
      ],
      "name": "clip0",
      "longname": "clip0",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000216",
      "___s": true
    },
    {
      "comment": "/**\r\n * Returns the absolute value of the highest coefficient of the \r\n * polynomial.\r\n * \r\n * @param p {number[]} p - The polynomial.\r\n * @returns {number}\r\n * @example\r\n * FloPoly.maxCoefficient([-2, 0.1, 0.2]); //=> 2\r\n */",
      "meta": {
        "range": [
          13494,
          13660
        ],
        "filename": "core-operators.js",
        "lineno": 560,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002005",
          "name": "maxCoefficient",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "max": "maxCoefficient~max",
          "i": "maxCoefficient~i",
          "c": "maxCoefficient~c"
        }
      },
      "description": "Returns the absolute value of the highest coefficient of the \rpolynomial.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "p - The polynomial.",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "examples": [
        "FloPoly.maxCoefficient([-2, 0.1, 0.2]); //=> 2"
      ],
      "name": "maxCoefficient",
      "longname": "maxCoefficient",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000217",
      "___s": true
    },
    {
      "comment": "/**\r\n * Returns a string representing the given polynomial that is readable \r\n * by a human or a CAS (Computer Algebra System).\r\n * \r\n * @param {number[]} p - The polynomial\r\n * @returns {string}\r\n * @example\r\n * FloPoly.toCasStr([5,4,3,2,1]); //=> \"x^4*5 + x^3*4 + x^2*3 + x*2 + 1\"\r\n */",
      "meta": {
        "range": [
          13955,
          14271
        ],
        "filename": "core-operators.js",
        "lineno": 582,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002047",
          "name": "toCasStr",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "d": "toCasStr~d",
          "str": "toCasStr~str",
          "i": "toCasStr~i",
          "cStr": "toCasStr~cStr"
        }
      },
      "description": "Returns a string representing the given polynomial that is readable \rby a human or a CAS (Computer Algebra System).",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "examples": [
        "FloPoly.toCasStr([5,4,3,2,1]); //=> \"x^4*5 + x^3*4 + x^2*3 + x*2 + 1\""
      ],
      "name": "toCasStr",
      "longname": "toCasStr",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000222",
      "___s": true
    },
    {
      "comment": "/**\r\n* <p>\r\n* Simple & fast practical library functions for functional univariate \r\n* polynomials over the reals (actually ECMAScript numbers, i.e. double \r\n* floats).\r\n* </p>\r\n* <p>\r\n* All polinomials are represented as a simple array starting with the \r\n* highest non-zero power, e.g. \r\n*   3x^3 + 5x^2 + 7x + 2 -> [3,5,7,2]\r\n* </p>\r\n* @ignore\r\n*/",
      "meta": {
        "range": [
          857,
          1051
        ],
        "filename": "flo-poly.js",
        "lineno": 28,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002187",
          "name": "FloPoly",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "<p>\rSimple & fast practical library functions for functional univariate \rpolynomials over the reals (actually ECMAScript numbers, i.e. double \rfloats).\r</p>\r<p>\rAll polinomials are represented as a simple array starting with the \rhighest non-zero power, e.g. \r  3x^3 + 5x^2 + 7x + 2 -> [3,5,7,2]\r</p>",
      "ignore": true,
      "name": "FloPoly",
      "longname": "FloPoly",
      "kind": "member",
      "scope": "global",
      "___id": "T000002R000239",
      "___s": true
    },
    {
      "comment": "/**\r\n * Operators (i.e. functions) directly related to roots and root \r\n * finding. \r\n * \r\n * @ignore\r\n */",
      "meta": {
        "range": [
          183,
          282
        ],
        "filename": "root-operators.js",
        "lineno": 11,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002225",
          "name": "rootOperators",
          "type": "ObjectExpression",
          "value": "{\"quadraticRoots\":\"\",\"numRootsWithin\":\"\",\"brent\":\"\",\"bisection\":\"\"}"
        }
      },
      "description": "Operators (i.e. functions) directly related to roots and root \rfinding.",
      "ignore": true,
      "name": "rootOperators",
      "longname": "rootOperators",
      "kind": "member",
      "scope": "global",
      "___id": "T000002R000246",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p>\r\n * Floating-point-stably calculates and returns the ordered quadratic \r\n * roots of the given quadratic polynomial.\r\n * </p>\r\n * <p>\r\n * This function is included only because it might be slightly faster\r\n * than calling allRoots due to allRoots first checking if the \r\n * polynomial is quadratic and checking if the roots are within the\r\n * given range.\r\n * </p>\r\n * @param {number[]} p - The 2nd order polynomial\r\n * @returns {number[]} The found quadratic roots.\r\n * @example \r\n * FloPoly.quadraticRoots([1, -3, 2]); //=> [1,2]\r\n */",
      "meta": {
        "range": [
          903,
          1403
        ],
        "filename": "root-operators.js",
        "lineno": 39,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002246",
          "name": "quadraticRoots",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "undefined": null,
          "delta": "quadraticRoots~delta",
          "root1": "quadraticRoots~root1",
          "root2": "quadraticRoots~root2"
        }
      },
      "description": "<p>\rFloating-point-stably calculates and returns the ordered quadratic \rroots of the given quadratic polynomial.\r</p>\r<p>\rThis function is included only because it might be slightly faster\rthan calling allRoots due to allRoots first checking if the \rpolynomial is quadratic and checking if the roots are within the\rgiven range.\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The 2nd order polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The found quadratic roots."
        }
      ],
      "examples": [
        "FloPoly.quadraticRoots([1, -3, 2]); //=> [1,2]"
      ],
      "name": "quadraticRoots",
      "longname": "quadraticRoots",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000254",
      "___s": true
    },
    {
      "comment": "/** \r\n * Returns the number of real roots in the interval (a,b) of the given \r\n * polynomial.\r\n * \r\n * @param {number[]} p - The polynomial\r\n * @param {number} a - The lower bound\r\n * @param {number} b - The upper bound\r\n * @returns {number} The number of roots in the given interval\r\n * @example \r\n * let p = [1, 1, -64, 236, -240];\r\n * FloPoly.numRootsWithin(p,-20,-11); //=> 0\r\n * FloPoly.numRootsWithin(p,-11,-9);  //=> 1  \r\n * FloPoly.numRootsWithin(p,-11,3.5); //=> 3\r\n * FloPoly.numRootsWithin(p,-11,5);   //=> 4\r\n */",
      "meta": {
        "range": [
          4418,
          4632
        ],
        "filename": "root-operators.js",
        "lineno": 182,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002363",
          "name": "numRootsWithin",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "a",
            "b"
          ]
        },
        "vars": {
          "ps": "numRootsWithin~ps",
          "ev": "numRootsWithin~ev",
          "as": "numRootsWithin~as",
          "": null,
          "bs": "numRootsWithin~bs"
        }
      },
      "description": "Returns the number of real roots in the interval (a,b) of the given \rpolynomial.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The lower bound",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper bound",
          "name": "b"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of roots in the given interval"
        }
      ],
      "examples": [
        "let p = [1, 1, -64, 236, -240];\rFloPoly.numRootsWithin(p,-20,-11); //=> 0\rFloPoly.numRootsWithin(p,-11,-9);  //=> 1  \rFloPoly.numRootsWithin(p,-11,3.5); //=> 3\rFloPoly.numRootsWithin(p,-11,5);   //=> 4"
      ],
      "name": "numRootsWithin",
      "longname": "numRootsWithin",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000263",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p>\r\n * Searches an interval (a,b) for a root (i.e. zero) of the \r\n * given function with respect to its first argument using the Bisection \r\n * Method root-finding algorithm. Any function can be supplied (it does\r\n * not even have to be continuous) as long as the root is bracketed. \r\n * </p>\r\n * <p>\r\n * Note: This function has no advantages above the Brent method except\r\n * for its simpler implementation and can be much slower. Use brent \r\n * instead.\r\n * </p>\r\n * @param {function} f - The function for which the root is sought.\r\n * @param {number} a - The lower limit of the search interval.\r\n * @param {number} b - The upper limit of the search interval.\r\n * @returns {number} An estimate of the root to within δ (typically \r\n * about 1e-15 multiplied by the root magnitued).\r\n * @example\r\n * let p = FloPoly.fromRoots([-10,2,3,4]);  //=> [1, 1, -64, 236, -240]\r\n * let f = FloPoly.evaluate(p);\r\n * FloPoly.bisection(f,2.2,3.8); //=> 3\r\n * FloPoly.bisection(f,2.2,3.1); //=> 3.0000000000000044\r\n */",
      "meta": {
        "range": [
          5654,
          6471
        ],
        "filename": "root-operators.js",
        "lineno": 215,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002417",
          "name": "bisection",
          "type": "FunctionDeclaration",
          "paramnames": [
            "f",
            "a",
            "b"
          ]
        },
        "vars": {
          "": null,
          "fa": "bisection~fa",
          "fb": "bisection~fb",
          "c": "bisection~c",
          "fc": "bisection~fc",
          "b": "bisection~b",
          "a": "bisection~a",
          "δ": "bisection~δ"
        }
      },
      "description": "<p>\rSearches an interval (a,b) for a root (i.e. zero) of the \rgiven function with respect to its first argument using the Bisection \rMethod root-finding algorithm. Any function can be supplied (it does\rnot even have to be continuous) as long as the root is bracketed. \r</p>\r<p>\rNote: This function has no advantages above the Brent method except\rfor its simpler implementation and can be much slower. Use brent \rinstead.\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function for which the root is sought.",
          "name": "f"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The lower limit of the search interval.",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper limit of the search interval.",
          "name": "b"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "An estimate of the root to within δ (typically \rabout 1e-15 multiplied by the root magnitued)."
        }
      ],
      "examples": [
        "let p = FloPoly.fromRoots([-10,2,3,4]);  //=> [1, 1, -64, 236, -240]\rlet f = FloPoly.evaluate(p);\rFloPoly.bisection(f,2.2,3.8); //=> 3\rFloPoly.bisection(f,2.2,3.1); //=> 3.0000000000000044"
      ],
      "name": "bisection",
      "longname": "bisection",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000268",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p>\r\n * Searches an interval (a,b) for a root (i.e. zero) of the \r\n * given function with respect to its first argument using the Brent's \r\n * Method root-finding algorithm. Any function can be supplied (it does\r\n * not even have to be continuous) as long as the root is bracketed. \r\n * </p>\r\n * <p>\r\n * Brent's Method is an excellent root-finding choice since it is\r\n * (1) guaranteed to converge (unlike the Newton and other so-called \r\n * single-point methods), (2) converges in a reasonable number of \r\n * iterations even for highly contrived functions (unlike Dekker's \r\n * Method) and (3) nearly always converges extremely fast, i.e. super-\r\n * linearly (unlike the Secant and Regula-Falsi methods).\r\n * </p>\r\n * <p>\r\n * The max error, δ, is set equal to 2*Number.EPSILON*Math.abs(b) \r\n * + Number.EPSILON after each iteration where b is the current best \r\n * guess. A much larger δ of say 1e-10 does not really make sense\r\n * for polynomials since nearly always by that stage convergence \r\n * proceeds superlinearly and by the next iteration a δ of\r\n * around Number.EPSILON is achieved. On the other hand, a δ of \r\n * much less than Number.EPSILON is sometimes useful, say for finding  \r\n * the root of the polynomial x**2 - 3*x*1e-13 + 2*1e-26 to within less\r\n * than 1e-15, but this is rare enough not to be considered in this \r\n * implementation. (For JavaScript doubles Number.EPSILON === \r\n * 2.220446049250313e-16 and since b is typically around 1 the max δ \r\n * will be about 3*2.220446049250313e-16 or about 1e-15. As another \r\n * example, a root near -1000 will have a max error, i.e. δ, of \r\n * about 1e-12. In conclusion, for roots near zero the error can be up\r\n * to Number.EPSILON or about 1e-15 - we don't bother to calculate the\r\n * root more accurately than this since it may require up to 4 or 5 \r\n * additional iterations.\r\n * </p>\r\n * <p> \r\n * See <a href=\"https://en.wikipedia.org/wiki/Brent%27s_method\">Wikipedia</a>\r\n * </p>\r\n * <p>\r\n * See <a href=\"https://maths-people.anu.edu.au/~brent/pd/rpb011i.pdf\">Brent (page 47)</a>\r\n * </p>\r\n * @param {function} f - The function for which the root is sought.\r\n * @param {number} a - The lower limit of the search interval.\r\n * @param {number} b - The upper limit of the search interval.\r\n * @returns {number} An estimate of the root to within δ (typically \r\n * about 1e-15 multiplied by the root magnitued).\r\n * @example\r\n * let p = FloPoly.fromRoots([-10,2,3,4]);  //=> [1, 1, -64, 236, -240]\r\n * let f = FloPoly.evaluate(p);\r\n * FloPoly.brent(f,2.2,3.8); //=> 3.000000000000003\r\n * FloPoly.brent(f,2.2,3.1); //=> 3.000000000000001\r\n */",
      "meta": {
        "range": [
          9099,
          11563
        ],
        "filename": "root-operators.js",
        "lineno": 307,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002547",
          "name": "brent",
          "type": "FunctionDeclaration",
          "paramnames": [
            "f",
            "a",
            "b"
          ]
        },
        "vars": {
          "fa": "brent~fa",
          "fb": "brent~fb",
          "c": "brent~c",
          "a": "brent~a",
          "b": "brent~b",
          "temp": "brent~temp",
          "mflag": "brent~mflag",
          "d": "brent~d",
          "δ": "brent~δ",
          "fc": "brent~fc",
          "s": "brent~s",
          "fac": "brent~fac",
          "fab": "brent~fab",
          "fbc": "brent~fbc",
          "t1": "brent~t1",
          "b_c": "brent~b_c",
          "s_b": "brent~s_b",
          "c_d": "brent~c_d",
          "fs": "brent~fs"
        }
      },
      "description": "<p>\rSearches an interval (a,b) for a root (i.e. zero) of the \rgiven function with respect to its first argument using the Brent's \rMethod root-finding algorithm. Any function can be supplied (it does\rnot even have to be continuous) as long as the root is bracketed. \r</p>\r<p>\rBrent's Method is an excellent root-finding choice since it is\r(1) guaranteed to converge (unlike the Newton and other so-called \rsingle-point methods), (2) converges in a reasonable number of \riterations even for highly contrived functions (unlike Dekker's \rMethod) and (3) nearly always converges extremely fast, i.e. super-\rlinearly (unlike the Secant and Regula-Falsi methods).\r</p>\r<p>\rThe max error, δ, is set equal to 2*Number.EPSILON*Math.abs(b) \r+ Number.EPSILON after each iteration where b is the current best \rguess. A much larger δ of say 1e-10 does not really make sense\rfor polynomials since nearly always by that stage convergence \rproceeds superlinearly and by the next iteration a δ of\raround Number.EPSILON is achieved. On the other hand, a δ of \rmuch less than Number.EPSILON is sometimes useful, say for finding  \rthe root of the polynomial x**2 - 3*x*1e-13 + 2*1e-26 to within less\rthan 1e-15, but this is rare enough not to be considered in this \rimplementation. (For JavaScript doubles Number.EPSILON === \r2.220446049250313e-16 and since b is typically around 1 the max δ \rwill be about 3*2.220446049250313e-16 or about 1e-15. As another \rexample, a root near -1000 will have a max error, i.e. δ, of \rabout 1e-12. In conclusion, for roots near zero the error can be up\rto Number.EPSILON or about 1e-15 - we don't bother to calculate the\rroot more accurately than this since it may require up to 4 or 5 \radditional iterations.\r</p>\r<p> \rSee <a href=\"https://en.wikipedia.org/wiki/Brent%27s_method\">Wikipedia</a>\r</p>\r<p>\rSee <a href=\"https://maths-people.anu.edu.au/~brent/pd/rpb011i.pdf\">Brent (page 47)</a>\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function for which the root is sought.",
          "name": "f"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The lower limit of the search interval.",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper limit of the search interval.",
          "name": "b"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "An estimate of the root to within δ (typically \rabout 1e-15 multiplied by the root magnitued)."
        }
      ],
      "examples": [
        "let p = FloPoly.fromRoots([-10,2,3,4]);  //=> [1, 1, -64, 236, -240]\rlet f = FloPoly.evaluate(p);\rFloPoly.brent(f,2.2,3.8); //=> 3.000000000000003\rFloPoly.brent(f,2.2,3.1); //=> 3.000000000000001"
      ],
      "name": "brent",
      "longname": "brent",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000276",
      "___s": true
    },
    {
      "comment": "/**\r\n * Some seed value for the simple random number generator.\r\n * @ignore\r\n */",
      "meta": {
        "range": [
          153,
          169
        ],
        "filename": "random.js",
        "lineno": 10,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002946",
          "name": "SEED",
          "type": "Literal",
          "value": 123456789
        }
      },
      "description": "Some seed value for the simple random number generator.",
      "ignore": true,
      "name": "SEED",
      "longname": "SEED",
      "kind": "constant",
      "scope": "global",
      "___id": "T000002R000316",
      "___s": true
    },
    {
      "comment": "/**\r\n * The range for the simple random number generator, i.e. the generated\r\n * numbers will be in [0,RANGE].\r\n * @ignore\r\n */",
      "meta": {
        "range": [
          309,
          327
        ],
        "filename": "random.js",
        "lineno": 17,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002950",
          "name": "RANGE",
          "type": "Literal",
          "value": 4294967296
        }
      },
      "description": "The range for the simple random number generator, i.e. the generated\rnumbers will be in [0,RANGE].",
      "ignore": true,
      "name": "RANGE",
      "longname": "RANGE",
      "kind": "constant",
      "scope": "global",
      "___id": "T000002R000317",
      "___s": true
    },
    {
      "comment": "/**\r\n * Generates an array of random polynomials with parameters as specified \r\n * by flatRoots. The exact same polynomials will be created on each\r\n * call to this function if the same seed is used - this is by design to \r\n * improve testability.\r\n *   \r\n * @memberof random\r\n * @param {number} n - The number of polynomials to generate.\r\n * @param {number} d - The degree of the polynomials \r\n * @param {number} a - The lower bound of the distribution - defaults \r\n * to 0\r\n * @param {number} b - The upper bound of the distribution - defaults \r\n * to 1\r\n * @param {number} seed - A seed value for generating random values (so\r\n * that the results are reproducable)\r\n * @param {number} odds - The odds that a root will be doubled (applied\r\n * recursively so that some roots will be tripled, etc. - defaults to 0\r\n * @returns {number[][]} The array of random polynomials.\r\n * @example\r\n * FloPoly.random.flatRootsArr(2,3,0,10); //=> [[1, -17.27247918024659, 97.33487287168995, -179.34094494147305], [1, -14.934967160224915, 57.624514485645406, -14.513933300587215]]\r\n * FloPoly.random.flatRootsArr(2,3,0,10); //=> [[1, -17.27247918024659, 97.33487287168995, -179.34094494147305], [1, -14.934967160224915, 57.624514485645406, -14.513933300587215]]\r\n */",
      "meta": {
        "range": [
          1590,
          1633
        ],
        "filename": "random.js",
        "lineno": 41,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002954",
          "name": "flatRootsArr",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Generates an array of random polynomials with parameters as specified \rby flatRoots. The exact same polynomials will be created on each\rcall to this function if the same seed is used - this is by design to \rimprove testability.",
      "memberof": "random",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of polynomials to generate.",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The degree of the polynomials",
          "name": "d"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The lower bound of the distribution - defaults \rto 0",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper bound of the distribution - defaults \rto 1",
          "name": "b"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "A seed value for generating random values (so\rthat the results are reproducable)",
          "name": "seed"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The odds that a root will be doubled (applied\rrecursively so that some roots will be tripled, etc. - defaults to 0",
          "name": "odds"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The array of random polynomials."
        }
      ],
      "examples": [
        "FloPoly.random.flatRootsArr(2,3,0,10); //=> [[1, -17.27247918024659, 97.33487287168995, -179.34094494147305], [1, -14.934967160224915, 57.624514485645406, -14.513933300587215]]\rFloPoly.random.flatRootsArr(2,3,0,10); //=> [[1, -17.27247918024659, 97.33487287168995, -179.34094494147305], [1, -14.934967160224915, 57.624514485645406, -14.513933300587215]]"
      ],
      "name": "flatRootsArr",
      "longname": "random.flatRootsArr",
      "kind": "member",
      "scope": "static",
      "___id": "T000002R000318",
      "___s": true
    },
    {
      "comment": "/**\r\n * Generates an array of random polynomials as specified by \r\n * flatCoefficients. The exact same polynomials will be created on each\r\n * call to this function if the same seed is used - this is by design to \r\n * improve testability.\r\n *   \r\n * @memberof random\r\n * @param {number} n - The number of polynomials to generate.\r\n * @param {number} d - The degree of the polynomials \r\n * @param {number} a - The lower bound of the distribution - defaults \r\n * to 0\r\n * @param {number} b - The upper bound of the distribution - defaults \r\n * to 1\r\n * @param {number} seed - A seed value for generating random values (so\r\n * that the results are reproducable)\r\n * @returns {number[][]} The array of random polynomials.\r\n * @example\r\n * FloPoly.random.flatCoefficientsArr(2,3,-2,2); //=> [[0.1749166026711464, -0.20349335670471191, 0.9375684261322021], [1.0617692470550537, -1.8918039798736572, 0.8040215969085693]]\r\n * FloPoly.random.flatCoefficientsArr(2,3,-2,2); //=> [[0.1749166026711464, -0.20349335670471191, 0.9375684261322021], [1.0617692470550537, -1.8918039798736572, 0.8040215969085693]]\r\n */",
      "meta": {
        "range": [
          2745,
          2802
        ],
        "filename": "random.js",
        "lineno": 63,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002960",
          "name": "flatCoefficientsArr",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Generates an array of random polynomials as specified by \rflatCoefficients. The exact same polynomials will be created on each\rcall to this function if the same seed is used - this is by design to \rimprove testability.",
      "memberof": "random",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of polynomials to generate.",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The degree of the polynomials",
          "name": "d"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The lower bound of the distribution - defaults \rto 0",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper bound of the distribution - defaults \rto 1",
          "name": "b"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "A seed value for generating random values (so\rthat the results are reproducable)",
          "name": "seed"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The array of random polynomials."
        }
      ],
      "examples": [
        "FloPoly.random.flatCoefficientsArr(2,3,-2,2); //=> [[0.1749166026711464, -0.20349335670471191, 0.9375684261322021], [1.0617692470550537, -1.8918039798736572, 0.8040215969085693]]\rFloPoly.random.flatCoefficientsArr(2,3,-2,2); //=> [[0.1749166026711464, -0.20349335670471191, 0.9375684261322021], [1.0617692470550537, -1.8918039798736572, 0.8040215969085693]]"
      ],
      "name": "flatCoefficientsArr",
      "longname": "random.flatCoefficientsArr",
      "kind": "member",
      "scope": "static",
      "___id": "T000002R000319",
      "___s": true
    },
    {
      "comment": "/**\r\n * https://stackoverflow.com/questions/3062746/special-simple-random-number-generator\r\n * \r\n * @ignore\r\n * @param {number} seed\r\n * @returns {number} A quasi-random number to be used as the next input \r\n * to this function.\r\n */",
      "meta": {
        "range": [
          3144,
          3239
        ],
        "filename": "random.js",
        "lineno": 82,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002977",
          "name": "predictiveRandom",
          "type": "FunctionDeclaration",
          "paramnames": [
            "seed"
          ]
        },
        "vars": {
          "a": "predictiveRandom~a"
        }
      },
      "description": "https://stackoverflow.com/questions/3062746/special-simple-random-number-generator",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "seed"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "A quasi-random number to be used as the next input \rto this function."
        }
      ],
      "name": "predictiveRandom",
      "longname": "predictiveRandom",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000325",
      "___s": true
    },
    {
      "comment": "/**\r\n * Generates a random array of numbers picked from a bounded flat \r\n * distribution (i.e. a rectangular distribution) with specified odds of \r\n * duplication of consecutive values.\r\n *   \r\n * @ignore\r\n * @param {number} n - The number of values to generate.\r\n * @param {number} a - The lower bound of the distribution - defaults \r\n * to 0\r\n * @param {number} b - The upper bound of the distribution - defaults \r\n * to 1\r\n * @param {number} seed - A seed value for generating random values (so\r\n * that the results are reproducable)\r\n * @param {number} odds - The odds that a root will be doubled (applied\r\n * recursively so that some roots will be tripled, etc. - defaults to 0\r\n * @returns {number[]} - The random array.\r\n */",
      "meta": {
        "range": [
          3978,
          4319
        ],
        "filename": "random.js",
        "lineno": 106,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100002993",
          "name": "randomArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "n",
            "a",
            "b",
            "seed",
            "odds"
          ]
        },
        "vars": {
          "seed": "randomArray~seed",
          "odds": "randomArray~odds",
          "vs": "randomArray~vs",
          "i": "randomArray~i",
          "v": "randomArray~v"
        }
      },
      "description": "Generates a random array of numbers picked from a bounded flat \rdistribution (i.e. a rectangular distribution) with specified odds of \rduplication of consecutive values.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of values to generate.",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The lower bound of the distribution - defaults \rto 0",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper bound of the distribution - defaults \rto 1",
          "name": "b"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "A seed value for generating random values (so\rthat the results are reproducable)",
          "name": "seed"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The odds that a root will be doubled (applied\rrecursively so that some roots will be tripled, etc. - defaults to 0",
          "name": "odds"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "- The random array."
        }
      ],
      "name": "randomArray",
      "longname": "randomArray",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000327",
      "___s": true
    },
    {
      "comment": "/**\r\n * Helper function that will add more numbers to the passed array - \r\n * modifies the values parameter.\r\n *\r\n * @ignore\r\n * @param {number[]} values - An existing array of values - will be \r\n * modified!\r\n * @param {number} x - The number that will be added (possibly\r\n * multiple times)\r\n * @param {number} odds - The odds that the number will be added\r\n * again (recursively). \r\n */",
      "meta": {
        "range": [
          4717,
          4904
        ],
        "filename": "random.js",
        "lineno": 134,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003076",
          "name": "push",
          "type": "FunctionDeclaration",
          "paramnames": [
            "seed",
            "values",
            "x",
            "odds"
          ]
        },
        "vars": {
          "seed": "push~seed"
        }
      },
      "description": "Helper function that will add more numbers to the passed array - \rmodifies the values parameter.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "An existing array of values - will be \rmodified!",
          "name": "values"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number that will be added (possibly\rmultiple times)",
          "name": "x"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The odds that the number will be added\ragain (recursively).",
          "name": "odds"
        }
      ],
      "name": "push",
      "longname": "push",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000338",
      "___s": true
    },
    {
      "comment": "/**\r\n * Generates a random polynomial with roots picked from a bounded flat \r\n * distribution (i.e. a rectangular distribution) with specified odds of \r\n * duplication of consecutive values. Note that the resulting polynomial\r\n * won't have any complex roots.\r\n * \r\n * @memberof random\r\n * @param {number} d - The degree of the polynomials \r\n * @param {number} a - The lower bound of the distribution - defaults \r\n * to 0\r\n * @param {number} b - The upper bound of the distribution - defaults \r\n * to 1\r\n * @param {number} seed - A seed value for generating random values (so\r\n * that the results are reproducable)\r\n * @param {number} odds - The odds that a root will be doubled (applied\r\n * recursively so that some roots will be tripled, etc. - defaults to 0\r\n * @returns {{p: number[], seed: number}} a random polynomial and the\r\n * last seed value to reuse.\r\n * @example\r\n * FloPoly.random.flatRoots(3,0,10); //=> { p: [1, -17.27247918024659, 97.33487287168995, -179.34094494147305], seed: 939629312 }\r\n */",
      "meta": {
        "range": [
          5922,
          6257
        ],
        "filename": "random.js",
        "lineno": 167,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003113",
          "name": "flatRoots",
          "type": "FunctionDeclaration",
          "paramnames": [
            "d",
            "a",
            "b",
            "seed",
            "odds"
          ]
        },
        "vars": {
          "a": "random.flatRoots~a",
          "b": "random.flatRoots~b",
          "seed": "random.flatRoots~seed",
          "odds": "random.flatRoots~odds",
          "randArr": "random.flatRoots~randArr",
          "p": "random.flatRoots~p"
        }
      },
      "description": "Generates a random polynomial with roots picked from a bounded flat \rdistribution (i.e. a rectangular distribution) with specified odds of \rduplication of consecutive values. Note that the resulting polynomial\rwon't have any complex roots.",
      "memberof": "random",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The degree of the polynomials",
          "name": "d"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The lower bound of the distribution - defaults \rto 0",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper bound of the distribution - defaults \rto 1",
          "name": "b"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "A seed value for generating random values (so\rthat the results are reproducable)",
          "name": "seed"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The odds that a root will be doubled (applied\rrecursively so that some roots will be tripled, etc. - defaults to 0",
          "name": "odds"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "a random polynomial and the\rlast seed value to reuse."
        }
      ],
      "examples": [
        "FloPoly.random.flatRoots(3,0,10); //=> { p: [1, -17.27247918024659, 97.33487287168995, -179.34094494147305], seed: 939629312 }"
      ],
      "name": "flatRoots",
      "longname": "random.flatRoots",
      "kind": "function",
      "scope": "static",
      "___id": "T000002R000341",
      "___s": true
    },
    {
      "comment": "/**\r\n * Generates a random polynomial with coefficients picked from a bounded \r\n * flat distribution (i.e. a rectangular distribution). \r\n * \r\n * @memberof random\r\n * @param {number} d - The degree of the polynomials \r\n * @param {number} a - The lower bound of the distribution - defaults \r\n * to -1\r\n * @param {number} b - The upper bound of the distribution - defaults \r\n * to 1\r\n * @param {number} seed - A seed value for generating random values (so\r\n * that the results are reproducable)\r\n * @returns {{p: number[], seed: number}} a random polynomial and the\r\n * last seed value to reuse.\r\n * @example\r\n * FloPoly.random.flatCoefficients(3,-5,5); //=> { p: [0.437291506677866, -0.5087333917617798, 2.3439210653305054], seed: 939629312 }\r\n */",
      "meta": {
        "range": [
          7011,
          7289
        ],
        "filename": "random.js",
        "lineno": 199,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003187",
          "name": "flatCoefficients",
          "type": "FunctionDeclaration",
          "paramnames": [
            "d",
            "a",
            "b",
            "seed"
          ]
        },
        "vars": {
          "a": "random.flatCoefficients~a",
          "b": "random.flatCoefficients~b",
          "seed": "random.flatCoefficients~seed",
          "randArr": "random.flatCoefficients~randArr",
          "p": "random.flatCoefficients~p"
        }
      },
      "description": "Generates a random polynomial with coefficients picked from a bounded \rflat distribution (i.e. a rectangular distribution).",
      "memberof": "random",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The degree of the polynomials",
          "name": "d"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The lower bound of the distribution - defaults \rto -1",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper bound of the distribution - defaults \rto 1",
          "name": "b"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "A seed value for generating random values (so\rthat the results are reproducable)",
          "name": "seed"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "a random polynomial and the\rlast seed value to reuse."
        }
      ],
      "examples": [
        "FloPoly.random.flatCoefficients(3,-5,5); //=> { p: [0.437291506677866, -0.5087333917617798, 2.3439210653305054], seed: 939629312 }"
      ],
      "name": "flatCoefficients",
      "longname": "random.flatCoefficients",
      "kind": "function",
      "scope": "static",
      "___id": "T000002R000351",
      "___s": true
    },
    {
      "comment": "/**\r\n * Creates a function from the given function with parameters similar\r\n * to flatRoots but with an extra parameter in the beginning indicating\r\n * the length of the array generated by the original function.\r\n * \r\n * @ignore\r\n * @param {function} f\r\n * @returns {function}\r\n */",
      "meta": {
        "range": [
          7578,
          7874
        ],
        "filename": "random.js",
        "lineno": 222,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003250",
          "name": "createArrFunction",
          "type": "FunctionDeclaration",
          "paramnames": [
            "f"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function from the given function with parameters similar\rto flatRoots but with an extra parameter in the beginning indicating\rthe length of the array generated by the original function.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "f"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          }
        }
      ],
      "name": "createArrFunction",
      "longname": "createArrFunction",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000360",
      "___s": true
    },
    {
      "comment": "/** \r\n * Mobius namespaced functions, i.e. M(x) = (ax + b) / (cx + d) where \r\n * a,b,c and d are constants. Represented as a 2-diminsional array \r\n * [[a,b],[c,d]].\r\n * \r\n * @ignore\r\n * @namespace\r\n */",
      "meta": {
        "range": [
          223,
          310
        ],
        "filename": "mobius.js",
        "lineno": 11,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003327",
          "name": "Mobius",
          "type": "ObjectExpression",
          "value": "{\"changeVariables\":\"\",\"invert\":\"\",\"evaluateAt0\":\"\",\"evaluateAtInf\":\"\",\"evaluate\":\"\"}"
        }
      },
      "description": "Mobius namespaced functions, i.e. M(x) = (ax + b) / (cx + d) where \ra,b,c and d are constants. Represented as a 2-diminsional array \r[[a,b],[c,d]].",
      "ignore": true,
      "kind": "namespace",
      "name": "Mobius",
      "longname": "Mobius",
      "scope": "global",
      "___id": "T000002R000368",
      "___s": true
    },
    {
      "comment": "/**\r\n * Performs a change of variables x → ax + b on p(x) where\r\n * it is a precondition on the polynomial p that deg(p) = 1.\r\n *\r\n * @ignore\r\n * @param {number[]} p - The degree 1 polynomial p(x)\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number[]} The modified polynomial p(ax + b). \r\n */",
      "meta": {
        "range": [
          624,
          707
        ],
        "filename": "mobius.js",
        "lineno": 30,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003340",
          "name": "changeVariables1",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "a",
            "b"
          ]
        }
      },
      "description": "Performs a change of variables x → ax + b on p(x) where\rit is a precondition on the polynomial p that deg(p) = 1.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The degree 1 polynomial p(x)",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "b"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The modified polynomial p(ax + b)."
        }
      ],
      "name": "changeVariables1",
      "longname": "changeVariables1",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000374",
      "___s": true
    },
    {
      "comment": "/**\r\n * Performs a change of variables x → px + q on the given Mobius \r\n * function. \r\n *\r\n * @ignore\r\n * @param {number[][]} mobius - The mobius function \r\n * M(x) = (ax + b) / (cx + d) represented as [[a,b],[c,d]]\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number[][]} The modified mobius function \r\n * M(x) = (a(px + q) + b) / (c(px + q) + d). \r\n */",
      "meta": {
        "range": [
          1082,
          1217
        ],
        "filename": "mobius.js",
        "lineno": 50,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003362",
          "name": "changeVariables",
          "type": "FunctionDeclaration",
          "paramnames": [
            "mobius",
            "a",
            "b"
          ]
        }
      },
      "description": "Performs a change of variables x → px + q on the given Mobius \rfunction.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The mobius function \rM(x) = (ax + b) / (cx + d) represented as [[a,b],[c,d]]",
          "name": "mobius"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "b"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The modified mobius function \rM(x) = (a(px + q) + b) / (c(px + q) + d)."
        }
      ],
      "name": "changeVariables",
      "longname": "changeVariables",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000375",
      "___s": true
    },
    {
      "comment": "/**\r\n * Inverts the given mobius, i.e.\r\n * M(x) = (ax + b) / (cx + d) → (bx + a) / (dx + c)\r\n * \r\n * @ignore\r\n * @param {number[][]} mobius - The mobius function \r\n * M(x) = (ax + b) / (cx + d) represented as [[a,b],[c,d]]\r\n * @returns {number[][]} The modified mobius function. \r\n */",
      "meta": {
        "range": [
          1509,
          1599
        ],
        "filename": "mobius.js",
        "lineno": 67,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003384",
          "name": "invert",
          "type": "FunctionDeclaration",
          "paramnames": [
            "mobius"
          ]
        },
        "vars": {
          "undefined": null
        }
      },
      "description": "Inverts the given mobius, i.e.\rM(x) = (ax + b) / (cx + d) → (bx + a) / (dx + c)",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The mobius function \rM(x) = (ax + b) / (cx + d) represented as [[a,b],[c,d]]",
          "name": "mobius"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The modified mobius function."
        }
      ],
      "name": "invert",
      "longname": "invert",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000376",
      "___s": true
    },
    {
      "comment": "/**\r\n * Evaluates the given mobius function at x = 0.\r\n * \r\n * @ignore\r\n * @param {number[][]} mobius - The mobius function \r\n * M(x) = (ax + b) / (cx + d) represented as [[a,b],[c,d]]\r\n * @returns {number} The result of the evaluation.\r\n */",
      "meta": {
        "range": [
          1848,
          1919
        ],
        "filename": "mobius.js",
        "lineno": 82,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003402",
          "name": "evaluateAt0",
          "type": "FunctionDeclaration",
          "paramnames": [
            "mobius"
          ]
        }
      },
      "description": "Evaluates the given mobius function at x = 0.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The mobius function \rM(x) = (ax + b) / (cx + d) represented as [[a,b],[c,d]]",
          "name": "mobius"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The result of the evaluation."
        }
      ],
      "name": "evaluateAt0",
      "longname": "evaluateAt0",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000377",
      "___s": true
    },
    {
      "comment": "/**\r\n * Evaluates the given mobius function in the limit as x → ∞.\r\n * \r\n * @ignore\r\n * @param {number[][]} mobius - The mobius function \r\n * M(x) = (ax + b) / (cx + d) represented as [[a,b],[c,d]]\r\n * @returns {number} The result of the evaluation.\r\n */",
      "meta": {
        "range": [
          2181,
          2254
        ],
        "filename": "mobius.js",
        "lineno": 95,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003418",
          "name": "evaluateAtInf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "mobius"
          ]
        }
      },
      "description": "Evaluates the given mobius function in the limit as x → ∞.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The mobius function \rM(x) = (ax + b) / (cx + d) represented as [[a,b],[c,d]]",
          "name": "mobius"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The result of the evaluation."
        }
      ],
      "name": "evaluateAtInf",
      "longname": "evaluateAtInf",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000378",
      "___s": true
    },
    {
      "comment": "/**\r\n * Evaluates the given mobius function at a specific x.\r\n * \r\n * @ignore\r\n * @param {number[][]} mobius - The mobius function\r\n * @param {number} x - The x value at which to evaluate\r\n * M(x) = (ax + b) / (cx + d) represented as [[a,b],[c,d]]\r\n * @returns {number} The result of the evaluation.\r\n */",
      "meta": {
        "range": [
          2566,
          2669
        ],
        "filename": "mobius.js",
        "lineno": 109,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003434",
          "name": "evaluate",
          "type": "FunctionDeclaration",
          "paramnames": [
            "mobius",
            "x"
          ]
        },
        "vars": {
          "undefined": null
        }
      },
      "description": "Evaluates the given mobius function at a specific x.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The mobius function",
          "name": "mobius"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The x value at which to evaluate\rM(x) = (ax + b) / (cx + d) represented as [[a,b],[c,d]]",
          "name": "x"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The result of the evaluation."
        }
      ],
      "name": "evaluate",
      "longname": "evaluate",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000379",
      "___s": true
    },
    {
      "comment": "/**\r\n * Returns the maximum magnitude value within the supplied array of \r\n * numbers.\r\n * @ignore \r\n */",
      "meta": {
        "range": [
          463,
          544
        ],
        "filename": "root-bounds.js",
        "lineno": 23,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003498",
          "name": "maxAbs",
          "type": "FunctionDeclaration",
          "paramnames": [
            "ns"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns the maximum magnitude value within the supplied array of \rnumbers.",
      "ignore": true,
      "name": "maxAbs",
      "longname": "maxAbs",
      "kind": "function",
      "scope": "global",
      "params": [],
      "___id": "T000002R000392",
      "___s": true
    },
    {
      "comment": "/**\r\n * Finds an upper bound on the magnitude (absolute value) of the roots\r\n * (including complex roots) of the given polynomial using Rouche's \r\n * Theorem with k = n. This function is fast but the bound is not tight.\r\n * \r\n * @param p {number[]} p - The polynomial.\r\n * @returns {number} The bound.\r\n */",
      "meta": {
        "range": [
          858,
          982
        ],
        "filename": "root-bounds.js",
        "lineno": 36,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003521",
          "name": "rootMagnitudeUpperBound_rouche",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "d": "rootMagnitudeUpperBound_rouche~d",
          "R": "rootMagnitudeUpperBound_rouche~R"
        }
      },
      "description": "Finds an upper bound on the magnitude (absolute value) of the roots\r(including complex roots) of the given polynomial using Rouche's \rTheorem with k = n. This function is fast but the bound is not tight.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "p - The polynomial.",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bound."
        }
      ],
      "name": "rootMagnitudeUpperBound_rouche",
      "longname": "rootMagnitudeUpperBound_rouche",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000393",
      "___s": true
    },
    {
      "comment": "/**\r\n * Finds an upper bound on the magnitude (absolute value) of the roots\r\n * of the given polynomial using the near-optimal Fujiwara bound. Note\r\n * that the bound includes complex roots. The bound is tight but slow \r\n * due to usage of Math.pow().\r\n * \r\n * @see https://en.wikipedia.org/wiki/Properties_of_polynomial_roots#cite_note-Fujiwara1916-4\r\n * \r\n * @param {number[]} p - The polynomial.\r\n * @returns {number} The bound.\r\n * @example\r\n * FloPoly.rootMagnitudeUpperBound_fujiwara([2,-3,6,5,-130]); //=> 6.753296750770361\r\n * FloPoly.allRoots([2,-3,6,5,-130]); //=> [-2.397918624065303, 2.8793785310848383]\r\n */",
      "meta": {
        "range": [
          1610,
          1949
        ],
        "filename": "root-bounds.js",
        "lineno": 57,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003553",
          "name": "rootMagnitudeUpperBound_fujiwara",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "d": "rootMagnitudeUpperBound_fujiwara~d",
          "an": "rootMagnitudeUpperBound_fujiwara~an",
          "bs": "rootMagnitudeUpperBound_fujiwara~bs",
          "i": "rootMagnitudeUpperBound_fujiwara~i",
          "b": "rootMagnitudeUpperBound_fujiwara~b"
        }
      },
      "description": "Finds an upper bound on the magnitude (absolute value) of the roots\rof the given polynomial using the near-optimal Fujiwara bound. Note\rthat the bound includes complex roots. The bound is tight but slow \rdue to usage of Math.pow().",
      "see": [
        "https://en.wikipedia.org/wiki/Properties_of_polynomial_roots#cite_note-Fujiwara1916-4"
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial.",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bound."
        }
      ],
      "examples": [
        "FloPoly.rootMagnitudeUpperBound_fujiwara([2,-3,6,5,-130]); //=> 6.753296750770361\rFloPoly.allRoots([2,-3,6,5,-130]); //=> [-2.397918624065303, 2.8793785310848383]"
      ],
      "name": "rootMagnitudeUpperBound_fujiwara",
      "longname": "rootMagnitudeUpperBound_fujiwara",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000396",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p> \r\n * Returns an upper bound for the positive real roots of the given \r\n * polynomial.\r\n * </p>\r\n * <p>\r\n * See algoritm 6 of the paper by Vigklas, Akritas and Strzeboński, \r\n * specifically the LocalMaxQuadratic algorithm hence LMQ.\r\n * </p>  \r\n * \r\n * @param {number[]} p - The polynomial\r\n * @returns {number} A lower bound.\r\n * @example\r\n * FloPoly.positiveRootUpperBound_LMQ([2,-3,6,5,-130]); //=> 4.015534272870436 \r\n * FloPoly.positiveRootUpperBound_LMQ([2,3]);           //=> 0 \r\n * FloPoly.positiveRootUpperBound_LMQ([-2,-3,-4]);      //=> 0\r\n */",
      "meta": {
        "range": [
          2655,
          3628
        ],
        "filename": "root-bounds.js",
        "lineno": 103,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003671",
          "name": "positiveRootUpperBound_LMQ",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "deg": "positiveRootUpperBound_LMQ~deg",
          "p": "positiveRootUpperBound_LMQ~p",
          "timesUsed": "positiveRootUpperBound_LMQ~timesUsed",
          "i": "positiveRootUpperBound_LMQ~i",
          "ub": "positiveRootUpperBound_LMQ~ub",
          "m": "positiveRootUpperBound_LMQ~m",
          "tempub": "positiveRootUpperBound_LMQ~tempub",
          "any": "positiveRootUpperBound_LMQ~any",
          "k": "positiveRootUpperBound_LMQ~k",
          "pow": "positiveRootUpperBound_LMQ~pow",
          "powres": "positiveRootUpperBound_LMQ~powres",
          "temp": "positiveRootUpperBound_LMQ~temp"
        }
      },
      "description": "<p> \rReturns an upper bound for the positive real roots of the given \rpolynomial.\r</p>\r<p>\rSee algoritm 6 of the paper by Vigklas, Akritas and Strzeboński, \rspecifically the LocalMaxQuadratic algorithm hence LMQ.\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "A lower bound."
        }
      ],
      "examples": [
        "FloPoly.positiveRootUpperBound_LMQ([2,-3,6,5,-130]); //=> 4.015534272870436 \rFloPoly.positiveRootUpperBound_LMQ([2,3]);           //=> 0 \rFloPoly.positiveRootUpperBound_LMQ([-2,-3,-4]);      //=> 0"
      ],
      "name": "positiveRootUpperBound_LMQ",
      "longname": "positiveRootUpperBound_LMQ",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000403",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p> \r\n * Calculates a lower bound for the positive roots of the given \r\n * polynomial.\r\n * </p>\r\n * <p>\r\n * See algoritm 6 of the paper by Vigklas, Akritas and Strzeboński, \r\n * specifically the LocalMaxQuadratic algorithm hence LMQ.\r\n * </p>\r\n *  \r\n * @param {number[]} p - The polynomial\r\n * @returns {number} A lower bound.\r\n * @example\r\n * FloPoly.positiveRootLowerBound_LMQ([2,-3,6,5,-130]); //=> 1.6883241876925903\r\n * FloPoly.positiveRootLowerBound_LMQ([2,3]);           //=> 0 \r\n * FloPoly.positiveRootLowerBound_LMQ([-2,-3,-4]);      //=> 0\r\n */",
      "meta": {
        "range": [
          4198,
          4338
        ],
        "filename": "root-bounds.js",
        "lineno": 172,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003857",
          "name": "positiveRootLowerBound_LMQ",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "ub": "positiveRootLowerBound_LMQ~ub"
        }
      },
      "description": "<p> \rCalculates a lower bound for the positive roots of the given \rpolynomial.\r</p>\r<p>\rSee algoritm 6 of the paper by Vigklas, Akritas and Strzeboński, \rspecifically the LocalMaxQuadratic algorithm hence LMQ.\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "A lower bound."
        }
      ],
      "examples": [
        "FloPoly.positiveRootLowerBound_LMQ([2,-3,6,5,-130]); //=> 1.6883241876925903\rFloPoly.positiveRootLowerBound_LMQ([2,3]);           //=> 0 \rFloPoly.positiveRootLowerBound_LMQ([-2,-3,-4]);      //=> 0"
      ],
      "name": "positiveRootLowerBound_LMQ",
      "longname": "positiveRootLowerBound_LMQ",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000421",
      "___s": true
    },
    {
      "comment": "/**\r\n * See positiveRootUpperBound_LMQ\r\n * \r\n * @param {number[]} p - The polynomial\r\n * @returns {number} An upper bound.\r\n */",
      "meta": {
        "range": [
          4473,
          4576
        ],
        "filename": "root-bounds.js",
        "lineno": 185,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003880",
          "name": "negativeRootUpperBound_LMQ",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        }
      },
      "description": "See positiveRootUpperBound_LMQ",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "An upper bound."
        }
      ],
      "name": "negativeRootUpperBound_LMQ",
      "longname": "negativeRootUpperBound_LMQ",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000423",
      "___s": true
    },
    {
      "comment": "/**\r\n * See positiveRootLowerBound_LMQ\r\n * \r\n * @param {number[]} p - The polynomial\r\n * @returns {number} A lower bound.\r\n */",
      "meta": {
        "range": [
          4710,
          4813
        ],
        "filename": "root-bounds.js",
        "lineno": 196,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003891",
          "name": "negativeRootLowerBound_LMQ",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p"
          ]
        }
      },
      "description": "See positiveRootLowerBound_LMQ",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "A lower bound."
        }
      ],
      "name": "negativeRootLowerBound_LMQ",
      "longname": "negativeRootLowerBound_LMQ",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000424",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p>\r\n * Approximate condition number for polynomial evaluation multiplied\r\n * by the exact value of the polynomial evaluation.\r\n * </p>\r\n * <p>\r\n * See <a href=\"http://www-pequan.lip6.fr/~jmc/polycopies/Compensation-horner.pdf\">Compensated Horner Scheme - paragraph 1.1</a>\r\n * </p>\r\n * \r\n * @ignore\r\n * @param {number[]} p - The polynomial\r\n * @param {number} x - The evaluation point\r\n * @returns {number} The condition number multiplied exact polynomial \r\n * value at x\r\n */",
      "meta": {
        "range": [
          646,
          814
        ],
        "filename": "error-analysis.js",
        "lineno": 27,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003929",
          "name": "conditionNumber",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "x"
          ]
        },
        "vars": {
          "d": "conditionNumber~d",
          "res": "conditionNumber~res",
          "i": "conditionNumber~i"
        }
      },
      "description": "<p>\rApproximate condition number for polynomial evaluation multiplied\rby the exact value of the polynomial evaluation.\r</p>\r<p>\rSee <a href=\"http://www-pequan.lip6.fr/~jmc/polycopies/Compensation-horner.pdf\">Compensated Horner Scheme - paragraph 1.1</a>\r</p>",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The evaluation point",
          "name": "x"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The condition number multiplied exact polynomial \rvalue at x"
        }
      ],
      "name": "conditionNumber",
      "longname": "conditionNumber",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000430",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p>\r\n * Classic rule of thumb approximate error bound when using Horner's \r\n * method to evaluate polynomials. \r\n * </p>\r\n * <p>\r\n * See for instance <a href=\"http://www-pequan.lip6.fr/~jmc/polycopies/Compensation-horner.pdf\">compensated horner evaluation</a>\r\n * </p>\r\n * @param p {number[]} - The polynomial\r\n * @param x {number} - Value at which polynomial is evaluated. \r\n * @returns {number} The error bound\r\n * @example\r\n * hornerErrorBound([1.1,2.2,-3.3], 1.5); //=> 5.1292303737682235e-15 \r\n */",
      "meta": {
        "range": [
          1330,
          1458
        ],
        "filename": "error-analysis.js",
        "lineno": 52,
        "path": "C:\\Projects\\Polynomial\\js",
        "code": {
          "id": "astnode100003978",
          "name": "hornerErrorBound",
          "type": "FunctionDeclaration",
          "paramnames": [
            "p",
            "x"
          ]
        },
        "vars": {
          "δ": "hornerErrorBound~δ",
          "d": "hornerErrorBound~d"
        }
      },
      "description": "<p>\rClassic rule of thumb approximate error bound when using Horner's \rmethod to evaluate polynomials. \r</p>\r<p>\rSee for instance <a href=\"http://www-pequan.lip6.fr/~jmc/polycopies/Compensation-horner.pdf\">compensated horner evaluation</a>\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The polynomial",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Value at which polynomial is evaluated.",
          "name": "x"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The error bound"
        }
      ],
      "examples": [
        "hornerErrorBound([1.1,2.2,-3.3], 1.5); //=> 5.1292303737682235e-15 "
      ],
      "name": "hornerErrorBound",
      "longname": "hornerErrorBound",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000435",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "C:\\Projects\\Polynomial\\js\\all-roots-recursive.js",
        "C:\\Projects\\Polynomial\\js\\all-roots-vas.js",
        "C:\\Projects\\Polynomial\\js\\core-operators.js",
        "C:\\Projects\\Polynomial\\js\\flo-poly.js",
        "C:\\Projects\\Polynomial\\js\\root-operators.js",
        "C:\\Projects\\Polynomial\\js\\random.js",
        "C:\\Projects\\Polynomial\\js\\mobius.js",
        "C:\\Projects\\Polynomial\\js\\root-bounds.js",
        "C:\\Projects\\Polynomial\\js\\error-analysis.js"
      ],
      "___id": "T000002R000439",
      "___s": true
    }
  ]
}